// Code generated by goyacc -o proto.y.go -p proto proto.y. DO NOT EDIT.

//line proto.y:2
package protoparse

import __yyfmt__ "fmt"

//line proto.y:2

//lint:file-ignore SA4006 generated parser has unused values

import (
	"fmt"
	"math"
	"unicode"

	"github.com/jhump/protoreflect/desc/internal"
)

//line proto.y:18
type protoSymType struct {
	yys       int
	file      *fileNode
	fileDecls []*fileElement
	syn       *syntaxNode
	pkg       *packageNode
	imprt     *importNode
	msg       *messageNode
	msgDecls  []*messageElement
	fld       *fieldNode
	mapFld    *mapFieldNode
	mapType   *mapTypeNode
	grp       *groupNode
	oo        *oneOfNode
	ooDecls   []*oneOfElement
	ext       *extensionRangeNode
	resvd     *reservedNode
	en        *enumNode
	enDecls   []*enumElement
	env       *enumValueNode
	extend    *extendNode
	extDecls  []*extendElement
	svc       *serviceNode
	svcDecls  []*serviceElement
	mtd       *methodNode
	rpcType   *rpcTypeNode
	opts      []*optionNode
	optNm     []*optionNamePartNode
	cmpctOpts *compactOptionsNode
	rngs      []*rangeNode
	names     []*stringLiteralNode
	sl        []valueNode
	agg       []*aggregateEntryNode
	aggName   *aggregateNameNode
	v         valueNode
	str       *stringLiteralNode
	i         *negativeIntLiteralNode
	ui        *intLiteralNode
	f         *floatLiteralNode
	id        *identNode
	b         *basicNode
	err       error
}

const _STRING_LIT = 57346
const _INT_LIT = 57347
const _FLOAT_LIT = 57348
const _NAME = 57349
const _FQNAME = 57350
const _TYPENAME = 57351
const _SYNTAX = 57352
const _IMPORT = 57353
const _WEAK = 57354
const _PUBLIC = 57355
const _PACKAGE = 57356
const _OPTION = 57357
const _TRUE = 57358
const _FALSE = 57359
const _INF = 57360
const _NAN = 57361
const _REPEATED = 57362
const _OPTIONAL = 57363
const _REQUIRED = 57364
const _DOUBLE = 57365
const _FLOAT = 57366
const _INT32 = 57367
const _INT64 = 57368
const _UINT32 = 57369
const _UINT64 = 57370
const _SINT32 = 57371
const _SINT64 = 57372
const _FIXED32 = 57373
const _FIXED64 = 57374
const _SFIXED32 = 57375
const _SFIXED64 = 57376
const _BOOL = 57377
const _STRING = 57378
const _BYTES = 57379
const _GROUP = 57380
const _ONEOF = 57381
const _MAP = 57382
const _EXTENSIONS = 57383
const _TO = 57384
const _MAX = 57385
const _RESERVED = 57386
const _ENUM = 57387
const _MESSAGE = 57388
const _EXTEND = 57389
const _SERVICE = 57390
const _RPC = 57391
const _STREAM = 57392
const _RETURNS = 57393
const _ERROR = 57394

var protoToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"_STRING_LIT",
	"_INT_LIT",
	"_FLOAT_LIT",
	"_NAME",
	"_FQNAME",
	"_TYPENAME",
	"_SYNTAX",
	"_IMPORT",
	"_WEAK",
	"_PUBLIC",
	"_PACKAGE",
	"_OPTION",
	"_TRUE",
	"_FALSE",
	"_INF",
	"_NAN",
	"_REPEATED",
	"_OPTIONAL",
	"_REQUIRED",
	"_DOUBLE",
	"_FLOAT",
	"_INT32",
	"_INT64",
	"_UINT32",
	"_UINT64",
	"_SINT32",
	"_SINT64",
	"_FIXED32",
	"_FIXED64",
	"_SFIXED32",
	"_SFIXED64",
	"_BOOL",
	"_STRING",
	"_BYTES",
	"_GROUP",
	"_ONEOF",
	"_MAP",
	"_EXTENSIONS",
	"_TO",
	"_MAX",
	"_RESERVED",
	"_ENUM",
	"_MESSAGE",
	"_EXTEND",
	"_SERVICE",
	"_RPC",
	"_STREAM",
	"_RETURNS",
	"_ERROR",
	"'='",
	"';'",
	"':'",
	"'{'",
	"'}'",
	"'\\\\'",
	"'/'",
	"'?'",
	"'.'",
	"','",
	"'>'",
	"'<'",
	"'+'",
	"'-'",
	"'('",
	"')'",
	"'['",
	"']'",
	"'*'",
	"'&'",
	"'^'",
	"'%'",
	"'$'",
	"'#'",
	"'@'",
	"'!'",
	"'~'",
	"'`'",
}
var protoStatenames = [...]string{}

const protoEofCode = 1
const protoErrCode = 2
const protoInitialStackSize = 16

//line proto.y:1003

//line yacctab:1
var protoExca = [...]int{
	-1, 0,
	1, 4,
	-2, 0,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 2,
	1, 1,
	-2, 0,
	-1, 3,
	1, 2,
	-2, 0,
	-1, 22,
	1, 3,
	-2, 0,
	-1, 93,
	57, 165,
	-2, 0,
	-1, 94,
	57, 151,
	-2, 0,
	-1, 96,
	57, 182,
	-2, 0,
	-1, 97,
	57, 191,
	-2, 0,
	-1, 109,
	57, 52,
	-2, 0,
	-1, 227,
	63, 52,
	-2, 0,
	-1, 244,
	57, 102,
	-2, 0,
	-1, 272,
	63, 52,
	-2, 0,
	-1, 319,
	63, 52,
	-2, 0,
	-1, 357,
	57, 165,
	-2, 0,
	-1, 360,
	57, 165,
	-2, 0,
	-1, 363,
	57, 165,
	-2, 0,
	-1, 372,
	63, 52,
	-2, 0,
	-1, 374,
	63, 52,
	-2, 0,
	-1, 402,
	57, 203,
	-2, 0,
}

const protoPrivate = 57344

const protoLast = 2470

var protoAct = [...]int{

	31, 123, 8, 404, 8, 8, 116, 168, 115, 312,
	293, 132, 101, 195, 103, 240, 76, 167, 288, 79,
	80, 82, 84, 208, 8, 102, 104, 106, 180, 122,
	117, 154, 81, 141, 160, 194, 144, 349, 30, 77,
	334, 239, 26, 392, 361, 348, 358, 355, 333, 241,
	350, 85, 340, 347, 88, 89, 242, 331, 242, 242,
	304, 242, 242, 302, 276, 275, 95, 242, 400, 345,
	95, 310, 242, 301, 384, 242, 29, 209, 242, 268,
	231, 202, 225, 109, 182, 209, 265, 262, 410, 224,
	92, 227, 108, 224, 264, 150, 145, 223, 398, 161,
	95, 223, 396, 224, 401, 224, 402, 224, 95, 311,
	172, 223, 376, 223, 354, 223, 323, 164, 363, 360,
	357, 244, 185, 247, 97, 324, 156, 155, 152, 114,
	17, 248, 211, 193, 80, 79, 183, 94, 211, 197,
	198, 187, 189, 191, 150, 145, 211, 81, 211, 246,
	224, 87, 222, 93, 369, 96, 87, 241, 223, 77,
	221, 161, 87, 87, 165, 399, 218, 201, 172, 163,
	381, 379, 215, 377, 368, 220, 199, 152, 201, 210,
	204, 364, 344, 156, 155, 213, 226, 407, 232, 233,
	234, 235, 236, 237, 216, 228, 407, 343, 338, 285,
	17, 100, 217, 214, 205, 164, 99, 186, 166, 17,
	230, 90, 98, 86, 25, 367, 335, 283, 17, 282,
	281, 280, 279, 278, 14, 245, 108, 238, 172, 206,
	91, 24, 4, 15, 263, 370, 16, 17, 267, 406,
	271, 14, 408, 277, 266, 273, 294, 243, 406, 95,
	15, 269, 165, 16, 17, 286, 298, 163, 307, 289,
	290, 29, 196, 383, 77, 330, 329, 19, 18, 20,
	21, 108, 328, 172, 172, 300, 13, 327, 303, 305,
	314, 220, 326, 318, 19, 18, 20, 21, 306, 325,
	320, 299, 210, 13, 294, 309, 308, 196, 291, 339,
	332, 177, 178, 337, 298, 284, 120, 11, 177, 11,
	11, 87, 29, 342, 179, 341, 3, 174, 175, 22,
	172, 172, 162, 118, 10, 346, 10, 10, 220, 11,
	176, 119, 9, 159, 9, 9, 108, 351, 12, 153,
	5, 356, 146, 359, 23, 362, 10, 143, 366, 108,
	108, 289, 172, 365, 9, 121, 77, 207, 147, 220,
	126, 371, 373, 23, 200, 292, 378, 139, 29, 380,
	125, 124, 382, 172, 295, 172, 27, 28, 169, 316,
	107, 105, 171, 249, 181, 185, 172, 185, 172, 185,
	385, 403, 387, 220, 394, 220, 314, 287, 7, 393,
	6, 2, 1, 0, 405, 405, 317, 409, 29, 110,
	113, 33, 0, 0, 34, 35, 36, 37, 38, 39,
	40, 41, 42, 43, 44, 45, 46, 47, 48, 49,
	50, 51, 52, 53, 54, 55, 56, 57, 58, 59,
	60, 61, 62, 63, 64, 65, 66, 67, 68, 69,
	70, 71, 72, 73, 74, 75, 0, 0, 0, 0,
	109, 0, 0, 0, 0, 0, 0, 0, 319, 111,
	112, 0, 0, 0, 315, 29, 110, 113, 33, 0,
	0, 34, 35, 36, 37, 38, 39, 40, 41, 42,
	43, 44, 45, 46, 47, 48, 49, 50, 51, 52,
	53, 54, 55, 56, 57, 58, 59, 60, 61, 62,
	63, 64, 65, 66, 67, 68, 69, 70, 71, 72,
	73, 74, 75, 0, 0, 0, 0, 109, 0, 0,
	0, 0, 0, 0, 0, 272, 111, 112, 0, 0,
	270, 29, 110, 113, 33, 0, 0, 34, 35, 36,
	37, 38, 39, 40, 41, 42, 43, 44, 45, 46,
	47, 48, 49, 50, 51, 52, 53, 54, 55, 56,
	57, 58, 59, 60, 61, 62, 63, 64, 65, 66,
	67, 68, 69, 70, 71, 72, 73, 74, 75, 0,
	0, 0, 0, 109, 0, 0, 0, 0, 0, 0,
	0, 374, 111, 112, 29, 110, 113, 33, 0, 0,
	34, 35, 36, 37, 38, 39, 40, 41, 42, 43,
	44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
	54, 55, 56, 57, 58, 59, 60, 61, 62, 63,
	64, 65, 66, 67, 68, 69, 70, 71, 72, 73,
	74, 75, 0, 0, 0, 0, 109, 0, 0, 0,
	0, 0, 170, 0, 372, 111, 112, 33, 0, 0,
	34, 35, 36, 37, 38, 39, 40, 41, 42, 43,
	44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
	54, 55, 56, 57, 58, 59, 60, 61, 62, 63,
	64, 65, 66, 67, 68, 69, 70, 71, 72, 73,
	74, 75, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 170, 397, 0, 0, 0, 33, 0, 173,
	34, 35, 36, 37, 38, 39, 40, 41, 42, 43,
	44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
	54, 55, 56, 57, 58, 59, 60, 61, 62, 63,
	64, 65, 66, 67, 68, 69, 70, 71, 72, 73,
	74, 75, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 170, 395, 0, 0, 0, 33, 0, 173,
	34, 35, 36, 37, 38, 39, 40, 41, 42, 43,
	44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
	54, 55, 56, 57, 58, 59, 60, 61, 62, 63,
	64, 65, 66, 67, 68, 69, 70, 71, 72, 73,
	74, 75, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 375, 29, 110, 113, 33, 0, 173,
	34, 35, 36, 37, 38, 39, 40, 41, 42, 43,
	44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
	54, 55, 56, 57, 58, 59, 60, 61, 62, 63,
	64, 65, 66, 67, 68, 69, 70, 71, 72, 73,
	74, 75, 0, 0, 0, 0, 109, 0, 0, 170,
	0, 0, 0, 0, 33, 111, 112, 34, 35, 36,
	37, 38, 39, 40, 41, 42, 43, 44, 45, 46,
	47, 48, 49, 50, 51, 52, 53, 54, 55, 56,
	57, 58, 59, 60, 61, 62, 63, 64, 65, 66,
	67, 68, 69, 70, 71, 72, 73, 74, 75, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 170,
	353, 0, 0, 0, 33, 0, 173, 34, 35, 36,
	37, 38, 39, 40, 41, 42, 43, 44, 45, 46,
	47, 48, 49, 50, 51, 52, 53, 54, 55, 56,
	57, 58, 59, 60, 61, 62, 63, 64, 65, 66,
	67, 68, 69, 70, 71, 72, 73, 74, 75, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 170,
	322, 0, 0, 0, 33, 0, 173, 34, 35, 36,
	37, 38, 39, 40, 41, 42, 43, 44, 45, 46,
	47, 48, 49, 50, 51, 52, 53, 54, 55, 56,
	57, 58, 59, 60, 61, 62, 63, 64, 65, 66,
	67, 68, 69, 70, 71, 72, 73, 74, 75, 0,
	0, 0, 0, 0, 219, 0, 0, 0, 0, 388,
	0, 0, 0, 0, 33, 0, 173, 34, 35, 36,
	37, 38, 39, 40, 41, 42, 43, 44, 45, 46,
	47, 48, 49, 50, 51, 52, 53, 54, 55, 56,
	57, 58, 59, 60, 61, 62, 63, 64, 65, 66,
	67, 68, 69, 70, 71, 72, 73, 74, 75, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 386,
	0, 0, 0, 0, 33, 0, 173, 34, 35, 36,
	37, 38, 39, 40, 41, 42, 43, 44, 45, 46,
	47, 48, 49, 50, 51, 52, 53, 54, 55, 56,
	57, 58, 59, 60, 61, 62, 63, 64, 65, 66,
	67, 68, 69, 70, 71, 72, 73, 74, 75, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 352,
	0, 0, 0, 0, 33, 0, 173, 34, 35, 36,
	37, 38, 39, 40, 41, 42, 43, 44, 45, 46,
	47, 48, 49, 50, 51, 52, 53, 54, 55, 56,
	57, 58, 59, 60, 61, 62, 63, 64, 65, 66,
	67, 68, 69, 70, 71, 72, 73, 74, 75, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 321,
	0, 0, 0, 0, 33, 0, 173, 34, 35, 36,
	37, 38, 39, 40, 41, 42, 43, 44, 45, 46,
	47, 48, 49, 50, 51, 52, 53, 54, 55, 56,
	57, 58, 59, 60, 61, 62, 63, 64, 65, 66,
	67, 68, 69, 70, 71, 72, 73, 74, 75, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 274,
	0, 0, 0, 0, 33, 0, 173, 34, 35, 36,
	37, 38, 39, 40, 41, 42, 43, 44, 45, 46,
	47, 48, 49, 50, 51, 52, 53, 54, 55, 56,
	57, 58, 59, 60, 61, 62, 63, 64, 65, 66,
	67, 68, 69, 70, 71, 72, 73, 74, 75, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 170,
	0, 0, 0, 0, 33, 0, 173, 34, 35, 36,
	37, 38, 39, 40, 41, 42, 43, 44, 45, 46,
	47, 48, 49, 50, 51, 52, 53, 54, 55, 56,
	57, 58, 59, 60, 61, 62, 63, 64, 65, 66,
	67, 68, 69, 70, 71, 72, 73, 74, 75, 250,
	251, 252, 253, 254, 255, 256, 257, 258, 259, 260,
	261, 0, 0, 0, 33, 32, 173, 34, 35, 36,
	37, 38, 39, 40, 41, 42, 43, 44, 45, 46,
	47, 48, 49, 50, 51, 52, 53, 54, 55, 56,
	57, 58, 59, 60, 61, 62, 63, 64, 65, 66,
	67, 68, 69, 70, 71, 72, 73, 74, 75, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	128, 0, 0, 0, 78, 33, 32, 83, 34, 35,
	36, 37, 38, 137, 40, 41, 42, 43, 131, 130,
	129, 47, 48, 49, 50, 51, 52, 53, 54, 55,
	56, 57, 58, 59, 60, 61, 62, 138, 142, 136,
	66, 67, 140, 133, 134, 135, 72, 73, 74, 75,
	0, 128, 127, 0, 0, 391, 33, 32, 83, 34,
	35, 36, 37, 38, 137, 40, 41, 42, 43, 131,
	130, 129, 47, 48, 49, 50, 51, 52, 53, 54,
	55, 56, 57, 58, 59, 60, 61, 62, 138, 142,
	136, 66, 67, 140, 133, 134, 135, 72, 73, 74,
	75, 0, 128, 127, 0, 0, 390, 33, 32, 83,
	34, 35, 36, 37, 38, 137, 40, 41, 42, 43,
	131, 130, 129, 47, 48, 49, 50, 51, 52, 53,
	54, 55, 56, 57, 58, 59, 60, 61, 62, 138,
	142, 136, 66, 67, 140, 133, 134, 135, 72, 73,
	74, 75, 0, 297, 127, 0, 0, 389, 33, 32,
	83, 34, 35, 36, 37, 38, 137, 40, 41, 42,
	43, 44, 45, 46, 47, 48, 49, 50, 51, 52,
	53, 54, 55, 56, 57, 58, 59, 60, 61, 62,
	63, 64, 65, 66, 67, 68, 69, 70, 71, 72,
	73, 74, 75, 0, 158, 296, 0, 0, 336, 33,
	32, 83, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 131, 130, 129, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 0, 128, 157, 0, 0, 212,
	33, 32, 83, 34, 35, 36, 37, 38, 137, 40,
	41, 42, 43, 131, 130, 129, 47, 48, 49, 50,
	51, 52, 53, 54, 55, 56, 57, 58, 59, 60,
	61, 62, 138, 142, 136, 66, 67, 140, 133, 134,
	135, 72, 73, 74, 75, 0, 149, 127, 0, 0,
	184, 33, 0, 0, 34, 35, 36, 37, 38, 137,
	40, 41, 42, 43, 44, 45, 46, 47, 48, 49,
	50, 51, 52, 53, 54, 55, 56, 57, 58, 59,
	60, 61, 62, 63, 64, 65, 66, 67, 151, 69,
	70, 71, 72, 73, 74, 75, 0, 128, 148, 0,
	0, 203, 33, 32, 83, 34, 35, 36, 37, 38,
	137, 40, 41, 42, 43, 131, 130, 129, 47, 48,
	49, 50, 51, 52, 53, 54, 55, 56, 57, 58,
	59, 60, 61, 62, 138, 142, 136, 66, 67, 140,
	133, 134, 135, 72, 73, 74, 75, 297, 0, 127,
	0, 0, 33, 32, 83, 34, 35, 36, 37, 38,
	137, 40, 41, 42, 43, 44, 45, 46, 47, 48,
	49, 50, 51, 52, 53, 54, 55, 56, 57, 58,
	59, 60, 61, 62, 63, 64, 65, 66, 67, 68,
	69, 70, 71, 72, 73, 74, 75, 158, 0, 296,
	0, 0, 33, 32, 83, 34, 35, 36, 37, 38,
	39, 40, 41, 42, 43, 131, 130, 129, 47, 48,
	49, 50, 51, 52, 53, 54, 55, 56, 57, 58,
	59, 60, 61, 62, 63, 64, 65, 66, 67, 68,
	69, 70, 71, 72, 73, 74, 75, 149, 0, 157,
	0, 0, 33, 0, 0, 34, 35, 36, 37, 38,
	137, 40, 41, 42, 43, 44, 45, 46, 47, 48,
	49, 50, 51, 52, 53, 54, 55, 56, 57, 58,
	59, 60, 61, 62, 63, 64, 65, 66, 67, 151,
	69, 70, 71, 72, 73, 74, 75, 0, 0, 148,
	33, 32, 83, 34, 35, 36, 37, 38, 39, 40,
	41, 42, 43, 44, 45, 46, 47, 48, 49, 50,
	51, 52, 53, 54, 55, 56, 57, 58, 59, 60,
	61, 62, 63, 64, 65, 66, 67, 68, 69, 70,
	71, 72, 73, 313, 75, 33, 32, 83, 34, 35,
	36, 37, 38, 39, 40, 41, 42, 43, 44, 45,
	46, 47, 48, 49, 50, 51, 52, 53, 54, 55,
	56, 57, 58, 59, 60, 61, 62, 63, 64, 65,
	66, 67, 68, 69, 70, 71, 72, 73, 74, 75,
	229, 0, 0, 0, 0, 33, 32, 0, 34, 35,
	36, 37, 38, 39, 40, 41, 42, 43, 44, 45,
	46, 47, 48, 49, 50, 51, 52, 53, 54, 55,
	56, 57, 58, 59, 60, 61, 62, 63, 64, 65,
	66, 67, 68, 69, 70, 71, 72, 73, 74, 75,
	33, 32, 83, 34, 35, 36, 37, 38, 39, 40,
	41, 42, 43, 44, 45, 46, 47, 48, 49, 50,
	51, 52, 53, 54, 55, 56, 57, 58, 59, 60,
	61, 192, 63, 64, 65, 66, 67, 68, 69, 70,
	71, 72, 73, 74, 75, 33, 32, 83, 34, 35,
	36, 37, 38, 39, 40, 41, 42, 43, 44, 45,
	46, 47, 48, 49, 50, 51, 52, 53, 54, 55,
	56, 57, 58, 59, 60, 61, 190, 63, 64, 65,
	66, 67, 68, 69, 70, 71, 72, 73, 74, 75,
	33, 32, 83, 34, 35, 36, 37, 38, 39, 40,
	41, 42, 43, 44, 45, 46, 47, 48, 49, 50,
	51, 52, 53, 54, 55, 56, 57, 58, 59, 60,
	61, 188, 63, 64, 65, 66, 67, 68, 69, 70,
	71, 72, 73, 74, 75, 33, 0, 95, 34, 35,
	36, 37, 38, 39, 40, 41, 42, 43, 44, 45,
	46, 47, 48, 49, 50, 51, 52, 53, 54, 55,
	56, 57, 58, 59, 60, 61, 62, 63, 64, 65,
	66, 67, 68, 69, 70, 71, 72, 73, 74, 75,
	33, 32, 0, 34, 35, 36, 37, 38, 39, 40,
	41, 42, 43, 44, 45, 46, 47, 48, 49, 50,
	51, 52, 53, 54, 55, 56, 57, 58, 59, 60,
	61, 62, 63, 64, 65, 66, 67, 68, 69, 70,
	71, 72, 73, 74, 75, 33, 0, 0, 34, 35,
	36, 37, 38, 39, 40, 41, 42, 43, 44, 45,
	46, 47, 48, 49, 50, 51, 52, 53, 54, 55,
	56, 57, 58, 59, 60, 61, 62, 63, 64, 65,
	66, 67, 68, 69, 70, 71, 72, 73, 74, 75,
}
var protoPact = [...]int{

	222, -1000, 239, 239, 178, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 160, 364, 2373, 1437, 2418, 2418,
	2098, 2418, 239, -1000, 308, -1000, 159, 308, 308, -1000,
	157, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 177, -1000, 2098, 97,
	81, 99, -1000, -1000, 68, 158, -1000, -1000, 152, 147,
	-1000, 840, 61, 1855, 2005, -1000, 1955, 203, -1000, -1000,
	-1000, 154, -1000, -1000, 307, -1000, -1000, -1000, -1000, 1377,
	-1000, 312, 296, -1000, 75, 1753, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 153, 2283,
	2238, 2193, 2328, 2418, 2418, 2098, 292, 1437, 2418, 2418,
	257, -1000, 17, 1804, -1000, -1000, -1000, -1000, -1000, 150,
	176, 72, -1000, 1702, -1000, -1000, -1000, -1000, 149, 115,
	-1000, -1000, -1000, -1000, 148, 2418, -1000, 1017, -1000, 98,
	96, 27, -1000, 2148, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 75, -1000, 13, -1000, -1000, -1000, 2328, 2418, 2328,
	2418, 2328, 2418, 174, -13, -1000, 205, 65, 172, 95,
	69, 307, 1404, -1000, -1000, -1000, 82, 32, -1000, 202,
	196, 303, -1000, -1000, -1000, -1000, -1000, -1000, 12, -1000,
	-1000, -1000, -1000, -1000, -1000, 471, -1000, 1317, -5, -6,
	-1000, 2098, 170, 169, 168, 167, 166, 164, 300, -1000,
	145, 292, 1437, 255, 1905, 286, -1000, -1000, 308, 11,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 9, 6, 80, -1000, 253, 66, 2053, -1000,
	404, -1000, 1257, 957, 53, -1000, -1000, 57, 284, 277,
	272, 267, 261, 260, 3, -1000, -1000, -22, -1000, 163,
	-1000, -1000, 1651, -1000, -1000, -1000, -1000, 144, 2328, -2,
	307, 2098, -1000, 143, -1000, 128, -1000, -1000, -1000, -1000,
	-1000, -1000, 1, 2098, 240, -1000, -17, -20, -1000, 1197,
	897, 51, -1000, -1000, -1000, -7, 64, -8, 63, -10,
	62, -1000, 127, -1000, 1437, 840, -1000, -1000, -1000, 162,
	-1000, 120, 91, -1000, -1000, 184, 240, -1000, 600, 537,
	-1000, 780, 49, -1000, -1000, -1000, 119, 1855, -1000, 117,
	1855, -1000, 116, 1855, -1000, -1000, -1000, 258, -1000, -1000,
	7, -1000, 1137, -1000, 1077, -1000, -1000, -1000, 1600, -1000,
	1549, -1000, 1498, -11, 2053, 720, 39, 660, 35, -1000,
	-1000, -1000, -1000, 111, 0, -1000, -1000, -1000, -1000, -1000,
	50, -1000, 194, 185, -1000, -1000, -1000, 34, -1000, -1000,
	-1000,
}
var protoPgo = [...]int{

	0, 402, 401, 340, 316, 400, 398, 1, 18, 397,
	3, 391, 16, 28, 384, 15, 12, 25, 14, 0,
	21, 11, 383, 382, 27, 381, 380, 379, 17, 7,
	378, 30, 374, 371, 29, 370, 367, 331, 6, 8,
	10, 365, 364, 360, 358, 33, 13, 35, 23, 357,
	355, 323, 36, 347, 342, 306, 31, 339, 26, 338,
	34, 333, 322, 9,
}
var protoR1 = [...]int{

	0, 1, 1, 1, 1, 4, 4, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 2, 5, 5,
	5, 6, 20, 20, 7, 12, 12, 12, 13, 13,
	14, 14, 16, 16, 17, 17, 17, 17, 17, 25,
	25, 24, 26, 26, 26, 26, 26, 58, 58, 18,
	28, 28, 28, 29, 29, 29, 29, 29, 29, 30,
	30, 30, 30, 30, 30, 30, 30, 30, 30, 23,
	23, 23, 27, 27, 27, 27, 27, 27, 27, 27,
	27, 21, 21, 21, 31, 31, 31, 31, 31, 31,
	31, 31, 15, 9, 9, 8, 34, 34, 34, 33,
	41, 41, 41, 40, 40, 40, 40, 40, 32, 32,
	35, 35, 36, 22, 22, 22, 22, 22, 22, 22,
	22, 22, 22, 22, 22, 50, 50, 47, 47, 46,
	46, 46, 49, 49, 48, 48, 48, 48, 48, 48,
	48, 43, 43, 44, 44, 45, 42, 42, 51, 53,
	53, 53, 52, 52, 52, 52, 52, 52, 54, 54,
	54, 54, 37, 39, 39, 39, 38, 38, 38, 38,
	38, 38, 38, 38, 38, 38, 38, 38, 38, 55,
	57, 57, 57, 56, 56, 56, 56, 56, 59, 61,
	61, 61, 60, 60, 60, 60, 60, 62, 62, 63,
	63, 11, 11, 11, 10, 10, 10, 10, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
	19,
}
var protoR2 = [...]int{

	0, 1, 1, 2, 0, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 1, 4, 3, 4,
	4, 3, 1, 1, 5, 1, 3, 4, 1, 2,
	1, 4, 1, 1, 1, 1, 1, 1, 1, 1,
	2, 2, 1, 2, 2, 2, 2, 1, 2, 3,
	1, 2, 0, 1, 2, 2, 2, 2, 1, 3,
	4, 5, 5, 3, 2, 5, 4, 5, 4, 1,
	3, 3, 1, 3, 3, 3, 5, 5, 3, 5,
	5, 1, 1, 2, 6, 6, 6, 5, 7, 7,
	7, 6, 3, 3, 1, 3, 8, 8, 8, 5,
	2, 1, 0, 1, 1, 1, 2, 1, 5, 6,
	5, 6, 6, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 4, 3, 1, 1,
	3, 3, 3, 1, 1, 1, 3, 3, 3, 3,
	3, 3, 1, 3, 1, 3, 3, 1, 5, 2,
	1, 0, 1, 1, 1, 1, 2, 1, 4, 5,
	4, 5, 5, 2, 1, 0, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 1, 5,
	2, 1, 0, 1, 1, 1, 2, 1, 5, 2,
	1, 0, 1, 1, 1, 2, 1, 10, 12, 2,
	1, 2, 1, 0, 1, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1,
}
var protoChk = [...]int{

	-1000, -1, -2, -4, 10, -3, -5, -6, -7, -37,
	-51, -55, -59, 54, 2, 11, 14, 15, 46, 45,
	47, 48, -4, -3, 53, 54, -58, 12, 13, 4,
	-20, -19, 8, 7, 10, 11, 12, 13, 14, 15,
	16, 17, 18, 19, 20, 21, 22, 23, 24, 25,
	26, 27, 28, 29, 30, 31, 32, 33, 34, 35,
	36, 37, 38, 39, 40, 41, 42, 43, 44, 45,
	46, 47, 48, 49, 50, 51, -12, -20, 67, -19,
	-19, -21, -20, 9, -19, -58, 54, 4, -58, -58,
	54, 53, -21, 56, 56, 9, 56, 56, 54, 54,
	54, -16, -17, -18, -58, -25, -24, -26, -19, 56,
	5, 65, 66, 6, 68, -39, -38, -31, -51, -37,
	-55, -50, -34, -7, -33, -35, -43, 54, 2, 22,
	21, 20, -21, 45, 46, 47, 41, 15, 39, -36,
	44, -45, 40, -53, -52, -7, -54, -44, 54, 2,
	-19, 44, -45, -57, -56, -31, -34, 54, 2, -61,
	-60, -7, -62, 54, 2, 49, 54, -28, -29, -30,
	2, -23, -19, 69, 5, 6, 18, 5, 6, 18,
	-13, -14, 9, 61, 57, -38, 54, -21, 38, -21,
	38, -21, 38, -19, -47, -46, 5, -19, -19, -47,
	-42, -58, 64, 57, -52, 54, 53, -49, -48, 5,
	-24, 66, 57, -56, 54, 57, -60, 54, -19, 57,
	-29, 62, 54, 62, 54, 55, -18, 64, -20, 2,
	-13, 67, -19, -19, -19, -19, -19, -19, 53, 54,
	-15, 62, 69, 42, 56, 53, 54, 54, 62, -22,
	25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
	35, 36, 5, -24, 62, 54, 42, 42, 67, -17,
	69, -18, 64, -28, 2, 70, 70, -21, 53, 53,
	53, 53, 53, 53, 5, 54, -46, -9, -8, -12,
	5, 43, -41, -40, -7, -32, 54, 2, -21, 5,
	-58, 62, 54, -15, 54, -15, -48, 5, 43, -24,
	5, 43, -63, 50, -21, 70, -27, 2, -16, 64,
	-28, 2, 63, 63, 68, 5, 5, 5, 5, 5,
	5, 54, -15, 70, 62, 53, 57, -40, 54, -19,
	54, -15, -21, 54, 54, 68, -21, 70, 62, 54,
	70, -28, 2, 63, 63, 54, -15, 56, 54, -15,
	56, 54, -15, 56, 54, -8, -16, 53, 54, 63,
	51, -16, 64, -16, 64, 63, 63, 54, -39, 54,
	-39, 54, -39, 5, 67, -28, 2, -28, 2, 57,
	57, 57, 54, -15, -63, 63, 63, 63, 63, 54,
	68, 54, 56, -11, -10, -7, 54, 2, 57, -10,
	54,
}
var protoDef = [...]int{

	-2, -2, -2, -2, 0, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 16, 0, 0, 0, 0, 0,
	0, 0, -2, 5, 0, 15, 0, 0, 0, 47,
	0, 22, 23, 208, 209, 210, 211, 212, 213, 214,
	215, 216, 217, 218, 219, 220, 221, 222, 223, 224,
	225, 226, 227, 228, 229, 230, 231, 232, 233, 234,
	235, 236, 237, 238, 239, 240, 241, 242, 243, 244,
	245, 246, 247, 248, 249, 250, 0, 25, 0, 0,
	0, 0, 81, 82, 0, 0, 18, 48, 0, 0,
	21, 0, 0, -2, -2, 83, -2, -2, 17, 19,
	20, 0, 32, 33, 34, 35, 36, 37, 38, -2,
	39, 0, 0, 42, 26, 0, 164, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 178, 0,
	0, 0, 0, 244, 245, 0, 240, 214, 238, 0,
	243, 142, 239, 0, 150, 152, 153, 154, 155, 157,
	0, 243, 144, 0, 181, 183, 184, 185, 187, 0,
	190, 192, 193, 194, 196, 0, 24, 0, 50, 53,
	58, 0, 69, 0, 40, 44, 45, 41, 43, 46,
	27, 28, 30, 0, 162, 163, 177, 0, 237, 0,
	237, 0, 237, 0, 0, 128, 129, 0, 0, 0,
	0, 147, 0, 148, 149, 156, 0, 0, 133, 134,
	135, 0, 179, 180, 186, 188, 189, 195, 0, 49,
	51, 54, 55, 56, 57, 0, 64, -2, 0, 0,
	29, 0, 0, 0, 0, 0, 0, 0, 0, 125,
	0, 0, 0, 0, -2, 0, 141, 145, 0, 0,
	113, 114, 115, 116, 117, 118, 119, 120, 121, 122,
	123, 124, 0, 0, 0, 143, 0, 0, 0, 59,
	0, 63, -2, 0, 58, 70, 71, 0, 0, 0,
	0, 0, 0, 0, 0, 126, 127, 0, 94, 0,
	130, 131, 0, 101, 103, 104, 105, 107, 0, 0,
	146, 0, 158, 0, 160, 0, 132, 136, 139, 137,
	138, 140, 0, 249, 200, 60, 0, 0, 72, -2,
	0, 58, 66, 68, 31, 0, 0, 0, 0, 0,
	0, 87, 0, 92, 0, 0, 99, 100, 106, 0,
	110, 0, 0, 159, 161, 0, 199, 61, 0, 0,
	62, 0, 58, 65, 67, 84, 0, -2, 85, 0,
	-2, 86, 0, -2, 91, 93, 95, 0, 111, 112,
	0, 73, -2, 74, -2, 75, 78, 88, 0, 89,
	0, 90, 0, 0, 0, 0, 58, 0, 58, 96,
	97, 98, 108, 0, 0, 76, 79, 77, 80, 109,
	0, 197, -2, 0, 202, 204, 205, 207, 198, 201,
	206,
}
var protoTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 78, 3, 76, 75, 74, 72, 3,
	67, 68, 71, 65, 62, 66, 61, 59, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 55, 54,
	64, 53, 63, 60, 77, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 69, 58, 70, 73, 3, 80, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 56, 3, 57, 79,
}
var protoTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52,
}
var protoTok3 = [...]int{
	0,
}

var protoErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	protoDebug        = 0
	protoErrorVerbose = false
)

type protoLexer interface {
	Lex(lval *protoSymType) int
	Error(s string)
}

type protoParser interface {
	Parse(protoLexer) int
	Lookahead() int
}

type protoParserImpl struct {
	lval  protoSymType
	stack [protoInitialStackSize]protoSymType
	char  int
}

func (p *protoParserImpl) Lookahead() int {
	return p.char
}

func protoNewParser() protoParser {
	return &protoParserImpl{}
}

const protoFlag = -1000

func protoTokname(c int) string {
	if c >= 1 && c-1 < len(protoToknames) {
		if protoToknames[c-1] != "" {
			return protoToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func protoStatname(s int) string {
	if s >= 0 && s < len(protoStatenames) {
		if protoStatenames[s] != "" {
			return protoStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func protoErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !protoErrorVerbose {
		return "syntax error"
	}

	for _, e := range protoErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + protoTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := protoPact[state]
	for tok := TOKSTART; tok-1 < len(protoToknames); tok++ {
		if n := base + tok; n >= 0 && n < protoLast && protoChk[protoAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if protoDef[state] == -2 {
		i := 0
		for protoExca[i] != -1 || protoExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; protoExca[i] >= 0; i += 2 {
			tok := protoExca[i]
			if tok < TOKSTART || protoExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if protoExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += protoTokname(tok)
	}
	return res
}

func protolex1(lex protoLexer, lval *protoSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = protoTok1[0]
		goto out
	}
	if char < len(protoTok1) {
		token = protoTok1[char]
		goto out
	}
	if char >= protoPrivate {
		if char < protoPrivate+len(protoTok2) {
			token = protoTok2[char-protoPrivate]
			goto out
		}
	}
	for i := 0; i < len(protoTok3); i += 2 {
		token = protoTok3[i+0]
		if token == char {
			token = protoTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = protoTok2[1] /* unknown char */
	}
	if protoDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", protoTokname(token), uint(char))
	}
	return char, token
}

func protoParse(protolex protoLexer) int {
	return protoNewParser().Parse(protolex)
}

func (protorcvr *protoParserImpl) Parse(protolex protoLexer) int {
	var proton int
	var protoVAL protoSymType
	var protoDollar []protoSymType
	_ = protoDollar // silence set and not used
	protoS := protorcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	protostate := 0
	protorcvr.char = -1
	prototoken := -1 // protorcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		protostate = -1
		protorcvr.char = -1
		prototoken = -1
	}()
	protop := -1
	goto protostack

ret0:
	return 0

ret1:
	return 1

protostack:
	/* put a state and value onto the stack */
	if protoDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", protoTokname(prototoken), protoStatname(protostate))
	}

	protop++
	if protop >= len(protoS) {
		nyys := make([]protoSymType, len(protoS)*2)
		copy(nyys, protoS)
		protoS = nyys
	}
	protoS[protop] = protoVAL
	protoS[protop].yys = protostate

protonewstate:
	proton = protoPact[protostate]
	if proton <= protoFlag {
		goto protodefault /* simple state */
	}
	if protorcvr.char < 0 {
		protorcvr.char, prototoken = protolex1(protolex, &protorcvr.lval)
	}
	proton += prototoken
	if proton < 0 || proton >= protoLast {
		goto protodefault
	}
	proton = protoAct[proton]
	if protoChk[proton] == prototoken { /* valid shift */
		protorcvr.char = -1
		prototoken = -1
		protoVAL = protorcvr.lval
		protostate = proton
		if Errflag > 0 {
			Errflag--
		}
		goto protostack
	}

protodefault:
	/* default state action */
	proton = protoDef[protostate]
	if proton == -2 {
		if protorcvr.char < 0 {
			protorcvr.char, prototoken = protolex1(protolex, &protorcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if protoExca[xi+0] == -1 && protoExca[xi+1] == protostate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			proton = protoExca[xi+0]
			if proton < 0 || proton == prototoken {
				break
			}
		}
		proton = protoExca[xi+1]
		if proton < 0 {
			goto ret0
		}
	}
	if proton == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			protolex.Error(protoErrorMessage(protostate, prototoken))
			Nerrs++
			if protoDebug >= 1 {
				__yyfmt__.Printf("%s", protoStatname(protostate))
				__yyfmt__.Printf(" saw %s\n", protoTokname(prototoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for protop >= 0 {
				proton = protoPact[protoS[protop].yys] + protoErrCode
				if proton >= 0 && proton < protoLast {
					protostate = protoAct[proton] /* simulate a shift of "error" */
					if protoChk[protostate] == protoErrCode {
						goto protostack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if protoDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", protoS[protop].yys)
				}
				protop--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if protoDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", protoTokname(prototoken))
			}
			if prototoken == protoEofCode {
				goto ret1
			}
			protorcvr.char = -1
			prototoken = -1
			goto protonewstate /* try again in the same state */
		}
	}

	/* reduction by production proton */
	if protoDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", proton, protoStatname(protostate))
	}

	protont := proton
	protopt := protop
	_ = protopt // guard against "declared and not used"

	protop -= protoR2[proton]
	// protop is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if protop+1 >= len(protoS) {
		nyys := make([]protoSymType, len(protoS)*2)
		copy(nyys, protoS)
		protoS = nyys
	}
	protoVAL = protoS[protop+1]

	/* consult goto table to find next state */
	proton = protoR1[proton]
	protog := protoPgo[proton]
	protoj := protog + protoS[protop].yys + 1

	if protoj >= protoLast {
		protostate = protoAct[protog]
	} else {
		protostate = protoAct[protoj]
		if protoChk[protostate] != -proton {
			protostate = protoAct[protog]
		}
	}
	// dummy call; replaced with literal code
	switch protont {

	case 1:
		protoDollar = protoS[protopt-1 : protopt+1]
//line proto.y:118
		{
			protoVAL.file = &fileNode{syntax: protoDollar[1].syn}
			protoVAL.file.setRange(protoDollar[1].syn, protoDollar[1].syn)
			protolex.(*protoLex).res = protoVAL.file
		}
	case 2:
		protoDollar = protoS[protopt-1 : protopt+1]
//line proto.y:123
		{
			protoVAL.file = &fileNode{decls: protoDollar[1].fileDecls}
			if len(protoDollar[1].fileDecls) > 0 {
				protoVAL.file.setRange(protoDollar[1].fileDecls[0], protoDollar[1].fileDecls[len(protoDollar[1].fileDecls)-1])
			}
			protolex.(*protoLex).res = protoVAL.file
		}
	case 3:
		protoDollar = protoS[protopt-2 : protopt+1]
//line proto.y:130
		{
			protoVAL.file = &fileNode{syntax: protoDollar[1].syn, decls: protoDollar[2].fileDecls}
			var end node
			if len(protoDollar[2].fileDecls) > 0 {
				end = protoDollar[2].fileDecls[len(protoDollar[2].fileDecls)-1]
			} else {
				end = protoDollar[1].syn
			}
			protoVAL.file.setRange(protoDollar[1].syn, end)
			protolex.(*protoLex).res = protoVAL.file
		}
	case 4:
		protoDollar = protoS[protopt-0 : protopt+1]
//line proto.y:141
		{
		}
	case 5:
		protoDollar = protoS[protopt-2 : protopt+1]
//line proto.y:144
		{
			protoVAL.fileDecls = append(protoDollar[1].fileDecls, protoDollar[2].fileDecls...)
		}
	case 7:
		protoDollar = protoS[protopt-1 : protopt+1]
//line proto.y:149
		{
			protoVAL.fileDecls = []*fileElement{{imp: protoDollar[1].imprt}}
		}
	case 8:
		protoDollar = protoS[protopt-1 : protopt+1]
//line proto.y:152
		{
			protoVAL.fileDecls = []*fileElement{{pkg: protoDollar[1].pkg}}
		}
	case 9:
		protoDollar = protoS[protopt-1 : protopt+1]
//line proto.y:155
		{
			protoVAL.fileDecls = []*fileElement{{option: protoDollar[1].opts[0]}}
		}
	case 10:
		protoDollar = protoS[protopt-1 : protopt+1]
//line proto.y:158
		{
			protoVAL.fileDecls = []*fileElement{{message: protoDollar[1].msg}}
		}
	case 11:
		protoDollar = protoS[protopt-1 : protopt+1]
//line proto.y:161
		{
			protoVAL.fileDecls = []*fileElement{{enum: protoDollar[1].en}}
		}
	case 12:
		protoDollar = protoS[protopt-1 : protopt+1]
//line proto.y:164
		{
			protoVAL.fileDecls = []*fileElement{{extend: protoDollar[1].extend}}
		}
	case 13:
		protoDollar = protoS[protopt-1 : protopt+1]
//line proto.y:167
		{
			protoVAL.fileDecls = []*fileElement{{service: protoDollar[1].svc}}
		}
	case 14:
		protoDollar = protoS[protopt-1 : protopt+1]
//line proto.y:170
		{
			protoVAL.fileDecls = []*fileElement{{empty: protoDollar[1].b}}
		}
	case 15:
		protoDollar = protoS[protopt-2 : protopt+1]
//line proto.y:173
		{
		}
	case 16:
		protoDollar = protoS[protopt-1 : protopt+1]
//line proto.y:175
		{
		}
	case 17:
		protoDollar = protoS[protopt-4 : protopt+1]
//line proto.y:178
		{
			if protoDollar[3].str.val != "proto2" && protoDollar[3].str.val != "proto3" {
				lexError(protolex, protoDollar[3].str.start(), "syntax value must be 'proto2' or 'proto3'")
			}
			protoVAL.syn = &syntaxNode{syntax: protoDollar[3].str}
			protoVAL.syn.setRange(protoDollar[1].id, protoDollar[4].b)
		}
	case 18:
		protoDollar = protoS[protopt-3 : protopt+1]
//line proto.y:186
		{
			protoVAL.imprt = &importNode{name: protoDollar[2].str}
			protoVAL.imprt.setRange(protoDollar[1].id, protoDollar[3].b)
		}
	case 19:
		protoDollar = protoS[protopt-4 : protopt+1]
//line proto.y:190
		{
			protoVAL.imprt = &importNode{name: protoDollar[3].str, weak: true}
			protoVAL.imprt.setRange(protoDollar[1].id, protoDollar[4].b)
		}
	case 20:
		protoDollar = protoS[protopt-4 : protopt+1]
//line proto.y:194
		{
			protoVAL.imprt = &importNode{name: protoDollar[3].str, public: true}
			protoVAL.imprt.setRange(protoDollar[1].id, protoDollar[4].b)
		}
	case 21:
		protoDollar = protoS[protopt-3 : protopt+1]
//line proto.y:199
		{
			protoVAL.pkg = &packageNode{name: protoDollar[2].id}
			protoVAL.pkg.setRange(protoDollar[1].id, protoDollar[3].b)
		}
	case 24:
		protoDollar = protoS[protopt-5 : protopt+1]
//line proto.y:207
		{
			n := &optionNameNode{parts: protoDollar[2].optNm}
			n.setRange(protoDollar[2].optNm[0], protoDollar[2].optNm[len(protoDollar[2].optNm)-1])
			o := &optionNode{name: n, val: protoDollar[4].v}
			o.setRange(protoDollar[1].id, protoDollar[5].b)
			protoVAL.opts = []*optionNode{o}
		}
	case 25:
		protoDollar = protoS[protopt-1 : protopt+1]
//line proto.y:215
		{
			protoVAL.optNm = toNameParts(protoDollar[1].id, 0)
		}
	case 26:
		protoDollar = protoS[protopt-3 : protopt+1]
//line proto.y:218
		{
			p := &optionNamePartNode{text: protoDollar[2].id, isExtension: true}
			p.setRange(protoDollar[1].b, protoDollar[3].b)
			protoVAL.optNm = []*optionNamePartNode{p}
		}
	case 27:
		protoDollar = protoS[protopt-4 : protopt+1]
//line proto.y:223
		{
			p := &optionNamePartNode{text: protoDollar[2].id, isExtension: true}
			p.setRange(protoDollar[1].b, protoDollar[3].b)
			ps := make([]*optionNamePartNode, 1, len(protoDollar[4].optNm)+1)
			ps[0] = p
			protoVAL.optNm = append(ps, protoDollar[4].optNm...)
		}
	case 29:
		protoDollar = protoS[protopt-2 : protopt+1]
//line proto.y:232
		{
			protoVAL.optNm = append(protoDollar[1].optNm, protoDollar[2].optNm...)
		}
	case 30:
		protoDollar = protoS[protopt-1 : protopt+1]
//line proto.y:236
		{
			protoVAL.optNm = toNameParts(protoDollar[1].id, 1 /* exclude leading dot */)
		}
	case 31:
		protoDollar = protoS[protopt-4 : protopt+1]
//line proto.y:239
		{
			p := &optionNamePartNode{text: protoDollar[3].id, isExtension: true}
			p.setRange(protoDollar[2].b, protoDollar[4].b)
			protoVAL.optNm = []*optionNamePartNode{p}
		}
	case 34:
		protoDollar = protoS[protopt-1 : protopt+1]
//line proto.y:248
		{
			protoVAL.v = protoDollar[1].str
		}
	case 35:
		protoDollar = protoS[protopt-1 : protopt+1]
//line proto.y:251
		{
			protoVAL.v = protoDollar[1].ui
		}
	case 36:
		protoDollar = protoS[protopt-1 : protopt+1]
//line proto.y:254
		{
			protoVAL.v = protoDollar[1].i
		}
	case 37:
		protoDollar = protoS[protopt-1 : protopt+1]
//line proto.y:257
		{
			protoVAL.v = protoDollar[1].f
		}
	case 38:
		protoDollar = protoS[protopt-1 : protopt+1]
//line proto.y:260
		{
			if protoDollar[1].id.val == "true" {
				protoVAL.v = &boolLiteralNode{identNode: protoDollar[1].id, val: true}
			} else if protoDollar[1].id.val == "false" {
				protoVAL.v = &boolLiteralNode{identNode: protoDollar[1].id, val: false}
			} else if protoDollar[1].id.val == "inf" {
				f := &floatLiteralNode{val: math.Inf(1)}
				f.setRange(protoDollar[1].id, protoDollar[1].id)
				protoVAL.v = f
			} else if protoDollar[1].id.val == "nan" {
				f := &floatLiteralNode{val: math.NaN()}
				f.setRange(protoDollar[1].id, protoDollar[1].id)
				protoVAL.v = f
			} else {
				protoVAL.v = protoDollar[1].id
			}
		}
	case 40:
		protoDollar = protoS[protopt-2 : protopt+1]
//line proto.y:279
		{
			protoVAL.ui = protoDollar[2].ui
		}
	case 41:
		protoDollar = protoS[protopt-2 : protopt+1]
//line proto.y:283
		{
			if protoDollar[2].ui.val > math.MaxInt64+1 {
				lexError(protolex, protoDollar[2].ui.start(), fmt.Sprintf("numeric constant %d would underflow (allowed range is %d to %d)", protoDollar[2].ui.val, int64(math.MinInt64), int64(math.MaxInt64)))
			}
			protoVAL.i = &negativeIntLiteralNode{val: -int64(protoDollar[2].ui.val)}
			protoVAL.i.setRange(protoDollar[1].b, protoDollar[2].ui)
		}
	case 43:
		protoDollar = protoS[protopt-2 : protopt+1]
//line proto.y:292
		{
			protoVAL.f = &floatLiteralNode{val: -protoDollar[2].f.val}
			protoVAL.f.setRange(protoDollar[1].b, protoDollar[2].f)
		}
	case 44:
		protoDollar = protoS[protopt-2 : protopt+1]
//line proto.y:296
		{
			protoVAL.f = &floatLiteralNode{val: protoDollar[2].f.val}
			protoVAL.f.setRange(protoDollar[1].b, protoDollar[2].f)
		}
	case 45:
		protoDollar = protoS[protopt-2 : protopt+1]
//line proto.y:300
		{
			protoVAL.f = &floatLiteralNode{val: math.Inf(1)}
			protoVAL.f.setRange(protoDollar[1].b, protoDollar[2].id)
		}
	case 46:
		protoDollar = protoS[protopt-2 : protopt+1]
//line proto.y:304
		{
			protoVAL.f = &floatLiteralNode{val: math.Inf(-1)}
			protoVAL.f.setRange(protoDollar[1].b, protoDollar[2].id)
		}
	case 48:
		protoDollar = protoS[protopt-2 : protopt+1]
//line proto.y:310
		{
			protoVAL.str = &stringLiteralNode{val: protoDollar[1].str.val + protoDollar[2].str.val}
			protoVAL.str.setRange(protoDollar[1].str, protoDollar[2].str)
		}
	case 49:
		protoDollar = protoS[protopt-3 : protopt+1]
//line proto.y:315
		{
			a := &aggregateLiteralNode{elements: protoDollar[2].agg}
			a.setRange(protoDollar[1].b, protoDollar[3].b)
			protoVAL.v = a
		}
	case 51:
		protoDollar = protoS[protopt-2 : protopt+1]
//line proto.y:322
		{
			protoVAL.agg = append(protoDollar[1].agg, protoDollar[2].agg...)
		}
	case 52:
		protoDollar = protoS[protopt-0 : protopt+1]
//line proto.y:325
		{
			protoVAL.agg = nil
		}
	case 54:
		protoDollar = protoS[protopt-2 : protopt+1]
//line proto.y:330
		{
			protoVAL.agg = protoDollar[1].agg
		}
	case 55:
		protoDollar = protoS[protopt-2 : protopt+1]
//line proto.y:333
		{
			protoVAL.agg = protoDollar[1].agg
		}
	case 56:
		protoDollar = protoS[protopt-2 : protopt+1]
//line proto.y:336
		{
		}
	case 57:
		protoDollar = protoS[protopt-2 : protopt+1]
//line proto.y:338
		{
		}
	case 58:
		protoDollar = protoS[protopt-1 : protopt+1]
//line proto.y:340
		{
		}
	case 59:
		protoDollar = protoS[protopt-3 : protopt+1]
//line proto.y:343
		{
			a := &aggregateEntryNode{name: protoDollar[1].aggName, val: protoDollar[3].v}
			a.setRange(protoDollar[1].aggName, protoDollar[3].v)
			protoVAL.agg = []*aggregateEntryNode{a}
		}
	case 60:
		protoDollar = protoS[protopt-4 : protopt+1]
//line proto.y:348
		{
			s := &sliceLiteralNode{}
			s.setRange(protoDollar[3].b, protoDollar[4].b)
			a := &aggregateEntryNode{name: protoDollar[1].aggName, val: s}
			a.setRange(protoDollar[1].aggName, protoDollar[4].b)
			protoVAL.agg = []*aggregateEntryNode{a}
		}
	case 61:
		protoDollar = protoS[protopt-5 : protopt+1]
//line proto.y:355
		{
			s := &sliceLiteralNode{elements: protoDollar[4].sl}
			s.setRange(protoDollar[3].b, protoDollar[5].b)
			a := &aggregateEntryNode{name: protoDollar[1].aggName, val: s}
			a.setRange(protoDollar[1].aggName, protoDollar[5].b)
			protoVAL.agg = []*aggregateEntryNode{a}
		}
	case 62:
		protoDollar = protoS[protopt-5 : protopt+1]
//line proto.y:362
		{
		}
	case 63:
		protoDollar = protoS[protopt-3 : protopt+1]
//line proto.y:364
		{
			a := &aggregateEntryNode{name: protoDollar[1].aggName, val: protoDollar[3].v}
			a.setRange(protoDollar[1].aggName, protoDollar[3].v)
			protoVAL.agg = []*aggregateEntryNode{a}
		}
	case 64:
		protoDollar = protoS[protopt-2 : protopt+1]
//line proto.y:369
		{
			a := &aggregateEntryNode{name: protoDollar[1].aggName, val: protoDollar[2].v}
			a.setRange(protoDollar[1].aggName, protoDollar[2].v)
			protoVAL.agg = []*aggregateEntryNode{a}
		}
	case 65:
		protoDollar = protoS[protopt-5 : protopt+1]
//line proto.y:374
		{
			s := &aggregateLiteralNode{elements: protoDollar[4].agg}
			s.setRange(protoDollar[3].b, protoDollar[5].b)
			a := &aggregateEntryNode{name: protoDollar[1].aggName, val: s}
			a.setRange(protoDollar[1].aggName, protoDollar[5].b)
			protoVAL.agg = []*aggregateEntryNode{a}
		}
	case 66:
		protoDollar = protoS[protopt-4 : protopt+1]
//line proto.y:381
		{
			s := &aggregateLiteralNode{elements: protoDollar[3].agg}
			s.setRange(protoDollar[2].b, protoDollar[4].b)
			a := &aggregateEntryNode{name: protoDollar[1].aggName, val: s}
			a.setRange(protoDollar[1].aggName, protoDollar[4].b)
			protoVAL.agg = []*aggregateEntryNode{a}
		}
	case 67:
		protoDollar = protoS[protopt-5 : protopt+1]
//line proto.y:388
		{
		}
	case 68:
		protoDollar = protoS[protopt-4 : protopt+1]
//line proto.y:390
		{
		}
	case 69:
		protoDollar = protoS[protopt-1 : protopt+1]
//line proto.y:393
		{
			protoVAL.aggName = &aggregateNameNode{name: protoDollar[1].id}
			protoVAL.aggName.setRange(protoDollar[1].id, protoDollar[1].id)
		}
	case 70:
		protoDollar = protoS[protopt-3 : protopt+1]
//line proto.y:397
		{
			protoVAL.aggName = &aggregateNameNode{name: protoDollar[2].id, isExtension: true}
			protoVAL.aggName.setRange(protoDollar[1].b, protoDollar[3].b)
		}
	case 71:
		protoDollar = protoS[protopt-3 : protopt+1]
//line proto.y:401
		{
		}
	case 72:
		protoDollar = protoS[protopt-1 : protopt+1]
//line proto.y:404
		{
			protoVAL.sl = []valueNode{protoDollar[1].v}
		}
	case 73:
		protoDollar = protoS[protopt-3 : protopt+1]
//line proto.y:407
		{
			protoVAL.sl = append(protoDollar[1].sl, protoDollar[3].v)
		}
	case 74:
		protoDollar = protoS[protopt-3 : protopt+1]
//line proto.y:410
		{
			protoVAL.sl = append(protoDollar[1].sl, protoDollar[3].v)
		}
	case 75:
		protoDollar = protoS[protopt-3 : protopt+1]
//line proto.y:413
		{
			s := &aggregateLiteralNode{elements: protoDollar[2].agg}
			s.setRange(protoDollar[1].b, protoDollar[3].b)
			protoVAL.sl = []valueNode{s}
		}
	case 76:
		protoDollar = protoS[protopt-5 : protopt+1]
//line proto.y:418
		{
			s := &aggregateLiteralNode{elements: protoDollar[4].agg}
			s.setRange(protoDollar[3].b, protoDollar[5].b)
			protoVAL.sl = append(protoDollar[1].sl, s)
		}
	case 77:
		protoDollar = protoS[protopt-5 : protopt+1]
//line proto.y:423
		{
			s := &aggregateLiteralNode{elements: protoDollar[4].agg}
			s.setRange(protoDollar[3].b, protoDollar[5].b)
			protoVAL.sl = append(protoDollar[1].sl, s)
		}
	case 78:
		protoDollar = protoS[protopt-3 : protopt+1]
//line proto.y:428
		{
		}
	case 79:
		protoDollar = protoS[protopt-5 : protopt+1]
//line proto.y:430
		{
		}
	case 80:
		protoDollar = protoS[protopt-5 : protopt+1]
//line proto.y:432
		{
		}
	case 83:
		protoDollar = protoS[protopt-2 : protopt+1]
//line proto.y:437
		{
			protoVAL.id = &identNode{val: protoDollar[1].id.val + protoDollar[2].id.val}
			protoVAL.id.setRange(protoDollar[1].id, protoDollar[2].id)
		}
	case 84:
		protoDollar = protoS[protopt-6 : protopt+1]
//line proto.y:442
		{
			checkTag(protolex, protoDollar[5].ui.start(), protoDollar[5].ui.val)
			lbl := &labelNode{identNode: protoDollar[1].id, required: true}
			protoVAL.fld = &fieldNode{label: lbl, fldType: protoDollar[2].id, name: protoDollar[3].id, tag: protoDollar[5].ui}
			protoVAL.fld.setRange(protoDollar[1].id, protoDollar[6].b)
		}
	case 85:
		protoDollar = protoS[protopt-6 : protopt+1]
//line proto.y:448
		{
			checkTag(protolex, protoDollar[5].ui.start(), protoDollar[5].ui.val)
			lbl := &labelNode{identNode: protoDollar[1].id}
			protoVAL.fld = &fieldNode{label: lbl, fldType: protoDollar[2].id, name: protoDollar[3].id, tag: protoDollar[5].ui}
			protoVAL.fld.setRange(protoDollar[1].id, protoDollar[6].b)
		}
	case 86:
		protoDollar = protoS[protopt-6 : protopt+1]
//line proto.y:454
		{
			checkTag(protolex, protoDollar[5].ui.start(), protoDollar[5].ui.val)
			lbl := &labelNode{identNode: protoDollar[1].id, repeated: true}
			protoVAL.fld = &fieldNode{label: lbl, fldType: protoDollar[2].id, name: protoDollar[3].id, tag: protoDollar[5].ui}
			protoVAL.fld.setRange(protoDollar[1].id, protoDollar[6].b)
		}
	case 87:
		protoDollar = protoS[protopt-5 : protopt+1]
//line proto.y:460
		{
			checkTag(protolex, protoDollar[4].ui.start(), protoDollar[4].ui.val)
			protoVAL.fld = &fieldNode{fldType: protoDollar[1].id, name: protoDollar[2].id, tag: protoDollar[4].ui}
			protoVAL.fld.setRange(protoDollar[1].id, protoDollar[5].b)
		}
	case 88:
		protoDollar = protoS[protopt-7 : protopt+1]
//line proto.y:465
		{
			checkTag(protolex, protoDollar[5].ui.start(), protoDollar[5].ui.val)
			lbl := &labelNode{identNode: protoDollar[1].id, required: true}
			protoVAL.fld = &fieldNode{label: lbl, fldType: protoDollar[2].id, name: protoDollar[3].id, tag: protoDollar[5].ui, options: protoDollar[6].cmpctOpts}
			protoVAL.fld.setRange(protoDollar[1].id, protoDollar[7].b)
		}
	case 89:
		protoDollar = protoS[protopt-7 : protopt+1]
//line proto.y:471
		{
			checkTag(protolex, protoDollar[5].ui.start(), protoDollar[5].ui.val)
			lbl := &labelNode{identNode: protoDollar[1].id}
			protoVAL.fld = &fieldNode{label: lbl, fldType: protoDollar[2].id, name: protoDollar[3].id, tag: protoDollar[5].ui, options: protoDollar[6].cmpctOpts}
			protoVAL.fld.setRange(protoDollar[1].id, protoDollar[7].b)
		}
	case 90:
		protoDollar = protoS[protopt-7 : protopt+1]
//line proto.y:477
		{
			checkTag(protolex, protoDollar[5].ui.start(), protoDollar[5].ui.val)
			lbl := &labelNode{identNode: protoDollar[1].id, repeated: true}
			protoVAL.fld = &fieldNode{label: lbl, fldType: protoDollar[2].id, name: protoDollar[3].id, tag: protoDollar[5].ui, options: protoDollar[6].cmpctOpts}
			protoVAL.fld.setRange(protoDollar[1].id, protoDollar[7].b)
		}
	case 91:
		protoDollar = protoS[protopt-6 : protopt+1]
//line proto.y:483
		{
			checkTag(protolex, protoDollar[4].ui.start(), protoDollar[4].ui.val)
			protoVAL.fld = &fieldNode{fldType: protoDollar[1].id, name: protoDollar[2].id, tag: protoDollar[4].ui, options: protoDollar[5].cmpctOpts}
			protoVAL.fld.setRange(protoDollar[1].id, protoDollar[6].b)
		}
	case 92:
		protoDollar = protoS[protopt-3 : protopt+1]
//line proto.y:489
		{
			protoVAL.cmpctOpts = &compactOptionsNode{decls: protoDollar[2].opts}
			protoVAL.cmpctOpts.setRange(protoDollar[1].b, protoDollar[3].b)
		}
	case 93:
		protoDollar = protoS[protopt-3 : protopt+1]
//line proto.y:494
		{
			protoVAL.opts = append(protoDollar[1].opts, protoDollar[3].opts...)
		}
	case 95:
		protoDollar = protoS[protopt-3 : protopt+1]
//line proto.y:499
		{
			n := &optionNameNode{parts: protoDollar[1].optNm}
			n.setRange(protoDollar[1].optNm[0], protoDollar[1].optNm[len(protoDollar[1].optNm)-1])
			o := &optionNode{name: n, val: protoDollar[3].v}
			o.setRange(protoDollar[1].optNm[0], protoDollar[3].v)
			protoVAL.opts = []*optionNode{o}
		}
	case 96:
		protoDollar = protoS[protopt-8 : protopt+1]
//line proto.y:507
		{
			checkTag(protolex, protoDollar[5].ui.start(), protoDollar[5].ui.val)
			if !unicode.IsUpper(rune(protoDollar[3].id.val[0])) {
				lexError(protolex, protoDollar[3].id.start(), fmt.Sprintf("group %s should have a name that starts with a capital letter", protoDollar[3].id.val))
			}
			lbl := &labelNode{identNode: protoDollar[1].id, required: true}
			protoVAL.grp = &groupNode{groupKeyword: protoDollar[2].id, label: lbl, name: protoDollar[3].id, tag: protoDollar[5].ui, decls: protoDollar[7].msgDecls}
			protoVAL.grp.setRange(protoDollar[1].id, protoDollar[8].b)
		}
	case 97:
		protoDollar = protoS[protopt-8 : protopt+1]
//line proto.y:516
		{
			checkTag(protolex, protoDollar[5].ui.start(), protoDollar[5].ui.val)
			if !unicode.IsUpper(rune(protoDollar[3].id.val[0])) {
				lexError(protolex, protoDollar[3].id.start(), fmt.Sprintf("group %s should have a name that starts with a capital letter", protoDollar[3].id.val))
			}
			lbl := &labelNode{identNode: protoDollar[1].id}
			protoVAL.grp = &groupNode{groupKeyword: protoDollar[2].id, label: lbl, name: protoDollar[3].id, tag: protoDollar[5].ui, decls: protoDollar[7].msgDecls}
			protoVAL.grp.setRange(protoDollar[1].id, protoDollar[8].b)
		}
	case 98:
		protoDollar = protoS[protopt-8 : protopt+1]
//line proto.y:525
		{
			checkTag(protolex, protoDollar[5].ui.start(), protoDollar[5].ui.val)
			if !unicode.IsUpper(rune(protoDollar[3].id.val[0])) {
				lexError(protolex, protoDollar[3].id.start(), fmt.Sprintf("group %s should have a name that starts with a capital letter", protoDollar[3].id.val))
			}
			lbl := &labelNode{identNode: protoDollar[1].id, repeated: true}
			protoVAL.grp = &groupNode{groupKeyword: protoDollar[2].id, label: lbl, name: protoDollar[3].id, tag: protoDollar[5].ui, decls: protoDollar[7].msgDecls}
			protoVAL.grp.setRange(protoDollar[1].id, protoDollar[8].b)
		}
	case 99:
		protoDollar = protoS[protopt-5 : protopt+1]
//line proto.y:535
		{
			c := 0
			for _, el := range protoDollar[4].ooDecls {
				if el.field != nil {
					c++
				}
			}
			if c == 0 {
				lexError(protolex, protoDollar[1].id.start(), "oneof must contain at least one field")
			}
			protoVAL.oo = &oneOfNode{name: protoDollar[2].id, decls: protoDollar[4].ooDecls}
			protoVAL.oo.setRange(protoDollar[1].id, protoDollar[5].b)
		}
	case 100:
		protoDollar = protoS[protopt-2 : protopt+1]
//line proto.y:549
		{
			protoVAL.ooDecls = append(protoDollar[1].ooDecls, protoDollar[2].ooDecls...)
		}
	case 102:
		protoDollar = protoS[protopt-0 : protopt+1]
//line proto.y:553
		{
			protoVAL.ooDecls = nil
		}
	case 103:
		protoDollar = protoS[protopt-1 : protopt+1]
//line proto.y:557
		{
			protoVAL.ooDecls = []*oneOfElement{{option: protoDollar[1].opts[0]}}
		}
	case 104:
		protoDollar = protoS[protopt-1 : protopt+1]
//line proto.y:560
		{
			protoVAL.ooDecls = []*oneOfElement{{field: protoDollar[1].fld}}
		}
	case 105:
		protoDollar = protoS[protopt-1 : protopt+1]
//line proto.y:563
		{
			protoVAL.ooDecls = []*oneOfElement{{empty: protoDollar[1].b}}
		}
	case 106:
		protoDollar = protoS[protopt-2 : protopt+1]
//line proto.y:566
		{
		}
	case 107:
		protoDollar = protoS[protopt-1 : protopt+1]
//line proto.y:568
		{
		}
	case 108:
		protoDollar = protoS[protopt-5 : protopt+1]
//line proto.y:571
		{
			checkTag(protolex, protoDollar[4].ui.start(), protoDollar[4].ui.val)
			protoVAL.fld = &fieldNode{fldType: protoDollar[1].id, name: protoDollar[2].id, tag: protoDollar[4].ui}
			protoVAL.fld.setRange(protoDollar[1].id, protoDollar[5].b)
		}
	case 109:
		protoDollar = protoS[protopt-6 : protopt+1]
//line proto.y:576
		{
			checkTag(protolex, protoDollar[4].ui.start(), protoDollar[4].ui.val)
			protoVAL.fld = &fieldNode{fldType: protoDollar[1].id, name: protoDollar[2].id, tag: protoDollar[4].ui, options: protoDollar[5].cmpctOpts}
			protoVAL.fld.setRange(protoDollar[1].id, protoDollar[6].b)
		}
	case 110:
		protoDollar = protoS[protopt-5 : protopt+1]
//line proto.y:582
		{
			checkTag(protolex, protoDollar[4].ui.start(), protoDollar[4].ui.val)
			protoVAL.mapFld = &mapFieldNode{mapType: protoDollar[1].mapType, name: protoDollar[2].id, tag: protoDollar[4].ui}
			protoVAL.mapFld.setRange(protoDollar[1].mapType, protoDollar[5].b)
		}
	case 111:
		protoDollar = protoS[protopt-6 : protopt+1]
//line proto.y:587
		{
			checkTag(protolex, protoDollar[4].ui.start(), protoDollar[4].ui.val)
			protoVAL.mapFld = &mapFieldNode{mapType: protoDollar[1].mapType, name: protoDollar[2].id, tag: protoDollar[4].ui, options: protoDollar[5].cmpctOpts}
			protoVAL.mapFld.setRange(protoDollar[1].mapType, protoDollar[6].b)
		}
	case 112:
		protoDollar = protoS[protopt-6 : protopt+1]
//line proto.y:593
		{
			protoVAL.mapType = &mapTypeNode{mapKeyword: protoDollar[1].id, keyType: protoDollar[3].id, valueType: protoDollar[5].id}
			protoVAL.mapType.setRange(protoDollar[1].id, protoDollar[6].b)
		}
	case 125:
		protoDollar = protoS[protopt-3 : protopt+1]
//line proto.y:611
		{
			protoVAL.ext = &extensionRangeNode{ranges: protoDollar[2].rngs}
			protoVAL.ext.setRange(protoDollar[1].id, protoDollar[3].b)
		}
	case 126:
		protoDollar = protoS[protopt-4 : protopt+1]
//line proto.y:615
		{
			protoVAL.ext = &extensionRangeNode{ranges: protoDollar[2].rngs, options: protoDollar[3].cmpctOpts}
			protoVAL.ext.setRange(protoDollar[1].id, protoDollar[4].b)
		}
	case 127:
		protoDollar = protoS[protopt-3 : protopt+1]
//line proto.y:620
		{
			protoVAL.rngs = append(protoDollar[1].rngs, protoDollar[3].rngs...)
		}
	case 129:
		protoDollar = protoS[protopt-1 : protopt+1]
//line proto.y:625
		{
			if protoDollar[1].ui.val > internal.MaxTag {
				lexError(protolex, protoDollar[1].ui.start(), fmt.Sprintf("range includes out-of-range tag: %d (should be between 0 and %d)", protoDollar[1].ui.val, internal.MaxTag))
			}
			r := &rangeNode{stNode: protoDollar[1].ui, enNode: protoDollar[1].ui, st: int32(protoDollar[1].ui.val), en: int32(protoDollar[1].ui.val)}
			r.setRange(protoDollar[1].ui, protoDollar[1].ui)
			protoVAL.rngs = []*rangeNode{r}
		}
	case 130:
		protoDollar = protoS[protopt-3 : protopt+1]
//line proto.y:633
		{
			if protoDollar[1].ui.val > internal.MaxTag {
				lexError(protolex, protoDollar[1].ui.start(), fmt.Sprintf("range start is out-of-range tag: %d (should be between 0 and %d)", protoDollar[1].ui.val, internal.MaxTag))
			}
			if protoDollar[3].ui.val > internal.MaxTag {
				lexError(protolex, protoDollar[3].ui.start(), fmt.Sprintf("range end is out-of-range tag: %d (should be between 0 and %d)", protoDollar[3].ui.val, internal.MaxTag))
			}
			if protoDollar[1].ui.val > protoDollar[3].ui.val {
				lexError(protolex, protoDollar[1].ui.start(), fmt.Sprintf("range, %d to %d, is invalid: start must be <= end", protoDollar[1].ui.val, protoDollar[3].ui.val))
			}
			r := &rangeNode{stNode: protoDollar[1].ui, enNode: protoDollar[3].ui, st: int32(protoDollar[1].ui.val), en: int32(protoDollar[3].ui.val)}
			r.setRange(protoDollar[1].ui, protoDollar[3].ui)
			protoVAL.rngs = []*rangeNode{r}
		}
	case 131:
		protoDollar = protoS[protopt-3 : protopt+1]
//line proto.y:647
		{
			if protoDollar[1].ui.val > internal.MaxTag {
				lexError(protolex, protoDollar[1].ui.start(), fmt.Sprintf("range start is out-of-range tag: %d (should be between 0 and %d)", protoDollar[1].ui.val, internal.MaxTag))
			}
			r := &rangeNode{stNode: protoDollar[1].ui, enNode: protoDollar[3].id, st: int32(protoDollar[1].ui.val), en: internal.MaxTag}
			r.setRange(protoDollar[1].ui, protoDollar[3].id)
			protoVAL.rngs = []*rangeNode{r}
		}
	case 132:
		protoDollar = protoS[protopt-3 : protopt+1]
//line proto.y:656
		{
			protoVAL.rngs = append(protoDollar[1].rngs, protoDollar[3].rngs...)
		}
	case 134:
		protoDollar = protoS[protopt-1 : protopt+1]
//line proto.y:661
		{
			checkUint64InInt32Range(protolex, protoDollar[1].ui.start(), protoDollar[1].ui.val)
			r := &rangeNode{stNode: protoDollar[1].ui, enNode: protoDollar[1].ui, st: int32(protoDollar[1].ui.val), en: int32(protoDollar[1].ui.val)}
			r.setRange(protoDollar[1].ui, protoDollar[1].ui)
			protoVAL.rngs = []*rangeNode{r}
		}
	case 135:
		protoDollar = protoS[protopt-1 : protopt+1]
//line proto.y:667
		{
			checkInt64InInt32Range(protolex, protoDollar[1].i.start(), protoDollar[1].i.val)
			r := &rangeNode{stNode: protoDollar[1].i, enNode: protoDollar[1].i, st: int32(protoDollar[1].i.val), en: int32(protoDollar[1].i.val)}
			r.setRange(protoDollar[1].i, protoDollar[1].i)
			protoVAL.rngs = []*rangeNode{r}
		}
	case 136:
		protoDollar = protoS[protopt-3 : protopt+1]
//line proto.y:673
		{
			checkUint64InInt32Range(protolex, protoDollar[1].ui.start(), protoDollar[1].ui.val)
			checkUint64InInt32Range(protolex, protoDollar[3].ui.start(), protoDollar[3].ui.val)
			if protoDollar[1].ui.val > protoDollar[3].ui.val {
				lexError(protolex, protoDollar[1].ui.start(), fmt.Sprintf("range, %d to %d, is invalid: start must be <= end", protoDollar[1].ui.val, protoDollar[3].ui.val))
			}
			r := &rangeNode{stNode: protoDollar[1].ui, enNode: protoDollar[3].ui, st: int32(protoDollar[1].ui.val), en: int32(protoDollar[3].ui.val)}
			r.setRange(protoDollar[1].ui, protoDollar[3].ui)
			protoVAL.rngs = []*rangeNode{r}
		}
	case 137:
		protoDollar = protoS[protopt-3 : protopt+1]
//line proto.y:683
		{
			checkInt64InInt32Range(protolex, protoDollar[1].i.start(), protoDollar[1].i.val)
			checkInt64InInt32Range(protolex, protoDollar[3].i.start(), protoDollar[3].i.val)
			if protoDollar[1].i.val > protoDollar[3].i.val {
				lexError(protolex, protoDollar[1].i.start(), fmt.Sprintf("range, %d to %d, is invalid: start must be <= end", protoDollar[1].i.val, protoDollar[3].i.val))
			}
			r := &rangeNode{stNode: protoDollar[1].i, enNode: protoDollar[3].i, st: int32(protoDollar[1].i.val), en: int32(protoDollar[3].i.val)}
			r.setRange(protoDollar[1].i, protoDollar[3].i)
			protoVAL.rngs = []*rangeNode{r}
		}
	case 138:
		protoDollar = protoS[protopt-3 : protopt+1]
//line proto.y:693
		{
			checkInt64InInt32Range(protolex, protoDollar[1].i.start(), protoDollar[1].i.val)
			checkUint64InInt32Range(protolex, protoDollar[3].ui.start(), protoDollar[3].ui.val)
			r := &rangeNode{stNode: protoDollar[1].i, enNode: protoDollar[3].ui, st: int32(protoDollar[1].i.val), en: int32(protoDollar[3].ui.val)}
			r.setRange(protoDollar[1].i, protoDollar[3].ui)
			protoVAL.rngs = []*rangeNode{r}
		}
	case 139:
		protoDollar = protoS[protopt-3 : protopt+1]
//line proto.y:700
		{
			checkUint64InInt32Range(protolex, protoDollar[1].ui.start(), protoDollar[1].ui.val)
			r := &rangeNode{stNode: protoDollar[1].ui, enNode: protoDollar[3].id, st: int32(protoDollar[1].ui.val), en: math.MaxInt32}
			r.setRange(protoDollar[1].ui, protoDollar[3].id)
			protoVAL.rngs = []*rangeNode{r}
		}
	case 140:
		protoDollar = protoS[protopt-3 : protopt+1]
//line proto.y:706
		{
			checkInt64InInt32Range(protolex, protoDollar[1].i.start(), protoDollar[1].i.val)
			r := &rangeNode{stNode: protoDollar[1].i, enNode: protoDollar[3].id, st: int32(protoDollar[1].i.val), en: math.MaxInt32}
			r.setRange(protoDollar[1].i, protoDollar[3].id)
			protoVAL.rngs = []*rangeNode{r}
		}
	case 141:
		protoDollar = protoS[protopt-3 : protopt+1]
//line proto.y:713
		{
			protoVAL.resvd = &reservedNode{ranges: protoDollar[2].rngs}
			protoVAL.resvd.setRange(protoDollar[1].id, protoDollar[3].b)
		}
	case 143:
		protoDollar = protoS[protopt-3 : protopt+1]
//line proto.y:719
		{
			protoVAL.resvd = &reservedNode{ranges: protoDollar[2].rngs}
			protoVAL.resvd.setRange(protoDollar[1].id, protoDollar[3].b)
		}
	case 145:
		protoDollar = protoS[protopt-3 : protopt+1]
//line proto.y:725
		{
			rsvd := map[string]struct{}{}
			for _, n := range protoDollar[2].names {
				if _, ok := rsvd[n.val]; ok {
					lexError(protolex, n.start(), fmt.Sprintf("name %q is reserved multiple times", n.val))
					break
				}
				rsvd[n.val] = struct{}{}
			}
			protoVAL.resvd = &reservedNode{names: protoDollar[2].names}
			protoVAL.resvd.setRange(protoDollar[1].id, protoDollar[3].b)
		}
	case 146:
		protoDollar = protoS[protopt-3 : protopt+1]
//line proto.y:738
		{
			protoVAL.names = append(protoDollar[1].names, protoDollar[3].str)
		}
	case 147:
		protoDollar = protoS[protopt-1 : protopt+1]
//line proto.y:741
		{
			protoVAL.names = []*stringLiteralNode{protoDollar[1].str}
		}
	case 148:
		protoDollar = protoS[protopt-5 : protopt+1]
//line proto.y:745
		{
			c := 0
			for _, el := range protoDollar[4].enDecls {
				if el.value != nil {
					c++
				}
			}
			if c == 0 {
				lexError(protolex, protoDollar[1].id.start(), "enums must define at least one value")
			}
			protoVAL.en = &enumNode{name: protoDollar[2].id, decls: protoDollar[4].enDecls}
			protoVAL.en.setRange(protoDollar[1].id, protoDollar[5].b)
		}
	case 149:
		protoDollar = protoS[protopt-2 : protopt+1]
//line proto.y:759
		{
			protoVAL.enDecls = append(protoDollar[1].enDecls, protoDollar[2].enDecls...)
		}
	case 151:
		protoDollar = protoS[protopt-0 : protopt+1]
//line proto.y:763
		{
			protoVAL.enDecls = nil
		}
	case 152:
		protoDollar = protoS[protopt-1 : protopt+1]
//line proto.y:767
		{
			protoVAL.enDecls = []*enumElement{{option: protoDollar[1].opts[0]}}
		}
	case 153:
		protoDollar = protoS[protopt-1 : protopt+1]
//line proto.y:770
		{
			protoVAL.enDecls = []*enumElement{{value: protoDollar[1].env}}
		}
	case 154:
		protoDollar = protoS[protopt-1 : protopt+1]
//line proto.y:773
		{
			protoVAL.enDecls = []*enumElement{{reserved: protoDollar[1].resvd}}
		}
	case 155:
		protoDollar = protoS[protopt-1 : protopt+1]
//line proto.y:776
		{
			protoVAL.enDecls = []*enumElement{{empty: protoDollar[1].b}}
		}
	case 156:
		protoDollar = protoS[protopt-2 : protopt+1]
//line proto.y:779
		{
		}
	case 157:
		protoDollar = protoS[protopt-1 : protopt+1]
//line proto.y:781
		{
		}
	case 158:
		protoDollar = protoS[protopt-4 : protopt+1]
//line proto.y:784
		{
			checkUint64InInt32Range(protolex, protoDollar[3].ui.start(), protoDollar[3].ui.val)
			protoVAL.env = &enumValueNode{name: protoDollar[1].id, numberP: protoDollar[3].ui}
			protoVAL.env.setRange(protoDollar[1].id, protoDollar[4].b)
		}
	case 159:
		protoDollar = protoS[protopt-5 : protopt+1]
//line proto.y:789
		{
			checkUint64InInt32Range(protolex, protoDollar[3].ui.start(), protoDollar[3].ui.val)
			protoVAL.env = &enumValueNode{name: protoDollar[1].id, numberP: protoDollar[3].ui, options: protoDollar[4].cmpctOpts}
			protoVAL.env.setRange(protoDollar[1].id, protoDollar[5].b)
		}
	case 160:
		protoDollar = protoS[protopt-4 : protopt+1]
//line proto.y:794
		{
			checkInt64InInt32Range(protolex, protoDollar[3].i.start(), protoDollar[3].i.val)
			protoVAL.env = &enumValueNode{name: protoDollar[1].id, numberN: protoDollar[3].i}
			protoVAL.env.setRange(protoDollar[1].id, protoDollar[4].b)
		}
	case 161:
		protoDollar = protoS[protopt-5 : protopt+1]
//line proto.y:799
		{
			checkInt64InInt32Range(protolex, protoDollar[3].i.start(), protoDollar[3].i.val)
			protoVAL.env = &enumValueNode{name: protoDollar[1].id, numberN: protoDollar[3].i, options: protoDollar[4].cmpctOpts}
			protoVAL.env.setRange(protoDollar[1].id, protoDollar[5].b)
		}
	case 162:
		protoDollar = protoS[protopt-5 : protopt+1]
//line proto.y:805
		{
			protoVAL.msg = &messageNode{name: protoDollar[2].id, decls: protoDollar[4].msgDecls}
			protoVAL.msg.setRange(protoDollar[1].id, protoDollar[5].b)
		}
	case 163:
		protoDollar = protoS[protopt-2 : protopt+1]
//line proto.y:810
		{
			protoVAL.msgDecls = append(protoDollar[1].msgDecls, protoDollar[2].msgDecls...)
		}
	case 165:
		protoDollar = protoS[protopt-0 : protopt+1]
//line proto.y:814
		{
			protoVAL.msgDecls = nil
		}
	case 166:
		protoDollar = protoS[protopt-1 : protopt+1]
//line proto.y:818
		{
			protoVAL.msgDecls = []*messageElement{{field: protoDollar[1].fld}}
		}
	case 167:
		protoDollar = protoS[protopt-1 : protopt+1]
//line proto.y:821
		{
			protoVAL.msgDecls = []*messageElement{{enum: protoDollar[1].en}}
		}
	case 168:
		protoDollar = protoS[protopt-1 : protopt+1]
//line proto.y:824
		{
			protoVAL.msgDecls = []*messageElement{{nested: protoDollar[1].msg}}
		}
	case 169:
		protoDollar = protoS[protopt-1 : protopt+1]
//line proto.y:827
		{
			protoVAL.msgDecls = []*messageElement{{extend: protoDollar[1].extend}}
		}
	case 170:
		protoDollar = protoS[protopt-1 : protopt+1]
//line proto.y:830
		{
			protoVAL.msgDecls = []*messageElement{{extensionRange: protoDollar[1].ext}}
		}
	case 171:
		protoDollar = protoS[protopt-1 : protopt+1]
//line proto.y:833
		{
			protoVAL.msgDecls = []*messageElement{{group: protoDollar[1].grp}}
		}
	case 172:
		protoDollar = protoS[protopt-1 : protopt+1]
//line proto.y:836
		{
			protoVAL.msgDecls = []*messageElement{{option: protoDollar[1].opts[0]}}
		}
	case 173:
		protoDollar = protoS[protopt-1 : protopt+1]
//line proto.y:839
		{
			protoVAL.msgDecls = []*messageElement{{oneOf: protoDollar[1].oo}}
		}
	case 174:
		protoDollar = protoS[protopt-1 : protopt+1]
//line proto.y:842
		{
			protoVAL.msgDecls = []*messageElement{{mapField: protoDollar[1].mapFld}}
		}
	case 175:
		protoDollar = protoS[protopt-1 : protopt+1]
//line proto.y:845
		{
			protoVAL.msgDecls = []*messageElement{{reserved: protoDollar[1].resvd}}
		}
	case 176:
		protoDollar = protoS[protopt-1 : protopt+1]
//line proto.y:848
		{
			protoVAL.msgDecls = []*messageElement{{empty: protoDollar[1].b}}
		}
	case 177:
		protoDollar = protoS[protopt-2 : protopt+1]
//line proto.y:851
		{
		}
	case 178:
		protoDollar = protoS[protopt-1 : protopt+1]
//line proto.y:853
		{
		}
	case 179:
		protoDollar = protoS[protopt-5 : protopt+1]
//line proto.y:856
		{
			c := 0
			for _, el := range protoDollar[4].extDecls {
				if el.field != nil || el.group != nil {
					c++
				}
			}
			if c == 0 {
				lexError(protolex, protoDollar[1].id.start(), "extend sections must define at least one extension")
			}
			protoVAL.extend = &extendNode{extendee: protoDollar[2].id, decls: protoDollar[4].extDecls}
			protoVAL.extend.setRange(protoDollar[1].id, protoDollar[5].b)
		}
	case 180:
		protoDollar = protoS[protopt-2 : protopt+1]
//line proto.y:870
		{
			protoVAL.extDecls = append(protoDollar[1].extDecls, protoDollar[2].extDecls...)
		}
	case 182:
		protoDollar = protoS[protopt-0 : protopt+1]
//line proto.y:874
		{
			protoVAL.extDecls = nil
		}
	case 183:
		protoDollar = protoS[protopt-1 : protopt+1]
//line proto.y:878
		{
			protoVAL.extDecls = []*extendElement{{field: protoDollar[1].fld}}
		}
	case 184:
		protoDollar = protoS[protopt-1 : protopt+1]
//line proto.y:881
		{
			protoVAL.extDecls = []*extendElement{{group: protoDollar[1].grp}}
		}
	case 185:
		protoDollar = protoS[protopt-1 : protopt+1]
//line proto.y:884
		{
			protoVAL.extDecls = []*extendElement{{empty: protoDollar[1].b}}
		}
	case 186:
		protoDollar = protoS[protopt-2 : protopt+1]
//line proto.y:887
		{
		}
	case 187:
		protoDollar = protoS[protopt-1 : protopt+1]
//line proto.y:889
		{
		}
	case 188:
		protoDollar = protoS[protopt-5 : protopt+1]
//line proto.y:892
		{
			protoVAL.svc = &serviceNode{name: protoDollar[2].id, decls: protoDollar[4].svcDecls}
			protoVAL.svc.setRange(protoDollar[1].id, protoDollar[5].b)
		}
	case 189:
		protoDollar = protoS[protopt-2 : protopt+1]
//line proto.y:897
		{
			protoVAL.svcDecls = append(protoDollar[1].svcDecls, protoDollar[2].svcDecls...)
		}
	case 191:
		protoDollar = protoS[protopt-0 : protopt+1]
//line proto.y:901
		{
			protoVAL.svcDecls = nil
		}
	case 192:
		protoDollar = protoS[protopt-1 : protopt+1]
//line proto.y:908
		{
			protoVAL.svcDecls = []*serviceElement{{option: protoDollar[1].opts[0]}}
		}
	case 193:
		protoDollar = protoS[protopt-1 : protopt+1]
//line proto.y:911
		{
			protoVAL.svcDecls = []*serviceElement{{rpc: protoDollar[1].mtd}}
		}
	case 194:
		protoDollar = protoS[protopt-1 : protopt+1]
//line proto.y:914
		{
			protoVAL.svcDecls = []*serviceElement{{empty: protoDollar[1].b}}
		}
	case 195:
		protoDollar = protoS[protopt-2 : protopt+1]
//line proto.y:917
		{
		}
	case 196:
		protoDollar = protoS[protopt-1 : protopt+1]
//line proto.y:919
		{
		}
	case 197:
		protoDollar = protoS[protopt-10 : protopt+1]
//line proto.y:922
		{
			protoVAL.mtd = &methodNode{name: protoDollar[2].id, input: protoDollar[4].rpcType, output: protoDollar[8].rpcType}
			protoVAL.mtd.setRange(protoDollar[1].id, protoDollar[10].b)
		}
	case 198:
		protoDollar = protoS[protopt-12 : protopt+1]
//line proto.y:926
		{
			protoVAL.mtd = &methodNode{name: protoDollar[2].id, input: protoDollar[4].rpcType, output: protoDollar[8].rpcType, options: protoDollar[11].opts}
			protoVAL.mtd.setRange(protoDollar[1].id, protoDollar[12].b)
		}
	case 199:
		protoDollar = protoS[protopt-2 : protopt+1]
//line proto.y:931
		{
			protoVAL.rpcType = &rpcTypeNode{msgType: protoDollar[2].id, streamKeyword: protoDollar[1].id}
			protoVAL.rpcType.setRange(protoDollar[1].id, protoDollar[2].id)
		}
	case 200:
		protoDollar = protoS[protopt-1 : protopt+1]
//line proto.y:935
		{
			protoVAL.rpcType = &rpcTypeNode{msgType: protoDollar[1].id}
			protoVAL.rpcType.setRange(protoDollar[1].id, protoDollar[1].id)
		}
	case 201:
		protoDollar = protoS[protopt-2 : protopt+1]
//line proto.y:940
		{
			protoVAL.opts = append(protoDollar[1].opts, protoDollar[2].opts...)
		}
	case 203:
		protoDollar = protoS[protopt-0 : protopt+1]
//line proto.y:944
		{
			protoVAL.opts = []*optionNode{}
		}
	case 204:
		protoDollar = protoS[protopt-1 : protopt+1]
//line proto.y:948
		{
			protoVAL.opts = protoDollar[1].opts
		}
	case 205:
		protoDollar = protoS[protopt-1 : protopt+1]
//line proto.y:951
		{
			protoVAL.opts = []*optionNode{}
		}
	case 206:
		protoDollar = protoS[protopt-2 : protopt+1]
//line proto.y:954
		{
		}
	case 207:
		protoDollar = protoS[protopt-1 : protopt+1]
//line proto.y:956
		{
		}
	}
	goto protostack /* stack new state and value */
}
