// Code generated by goyacc -o proto.y.go -p proto proto.y. DO NOT EDIT.

//line proto.y:2
package protoparse

import __yyfmt__ "fmt"

//line proto.y:2

//lint:file-ignore SA4006 generated parser has unused values

import (
	"fmt"
	"math"
	"unicode"

	"github.com/jhump/protoreflect/desc/internal"
)

//line proto.y:18
type protoSymType struct {
	yys       int
	file      *fileNode
	fileDecls []*fileElement
	syn       *syntaxNode
	pkg       *packageNode
	imprt     *importNode
	msg       *messageNode
	msgDecls  []*messageElement
	fld       *fieldNode
	mapFld    *mapFieldNode
	mapType   *mapTypeNode
	grp       *groupNode
	oo        *oneOfNode
	ooDecls   []*oneOfElement
	ext       *extensionRangeNode
	resvd     *reservedNode
	en        *enumNode
	enDecls   []*enumElement
	env       *enumValueNode
	extend    *extendNode
	extDecls  []*extendElement
	svc       *serviceNode
	svcDecls  []*serviceElement
	mtd       *methodNode
	rpcType   *rpcTypeNode
	opts      []*optionNode
	optNm     []*optionNamePartNode
	cmpctOpts *compactOptionsNode
	rngs      []*rangeNode
	names     []*compoundStringNode
	cid       *compoundIdentNode
	sl        []valueNode
	agg       []*aggregateEntryNode
	aggName   *aggregateNameNode
	v         valueNode
	il        *compoundIntNode
	str       *compoundStringNode
	s         *stringLiteralNode
	i         *intLiteralNode
	f         *floatLiteralNode
	id        *identNode
	b         *basicNode
	err       error
}

const _STRING_LIT = 57346
const _INT_LIT = 57347
const _FLOAT_LIT = 57348
const _NAME = 57349
const _FQNAME = 57350
const _TYPENAME = 57351
const _SYNTAX = 57352
const _IMPORT = 57353
const _WEAK = 57354
const _PUBLIC = 57355
const _PACKAGE = 57356
const _OPTION = 57357
const _TRUE = 57358
const _FALSE = 57359
const _INF = 57360
const _NAN = 57361
const _REPEATED = 57362
const _OPTIONAL = 57363
const _REQUIRED = 57364
const _DOUBLE = 57365
const _FLOAT = 57366
const _INT32 = 57367
const _INT64 = 57368
const _UINT32 = 57369
const _UINT64 = 57370
const _SINT32 = 57371
const _SINT64 = 57372
const _FIXED32 = 57373
const _FIXED64 = 57374
const _SFIXED32 = 57375
const _SFIXED64 = 57376
const _BOOL = 57377
const _STRING = 57378
const _BYTES = 57379
const _GROUP = 57380
const _ONEOF = 57381
const _MAP = 57382
const _EXTENSIONS = 57383
const _TO = 57384
const _MAX = 57385
const _RESERVED = 57386
const _ENUM = 57387
const _MESSAGE = 57388
const _EXTEND = 57389
const _SERVICE = 57390
const _RPC = 57391
const _STREAM = 57392
const _RETURNS = 57393
const _ERROR = 57394

var protoToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"_STRING_LIT",
	"_INT_LIT",
	"_FLOAT_LIT",
	"_NAME",
	"_FQNAME",
	"_TYPENAME",
	"_SYNTAX",
	"_IMPORT",
	"_WEAK",
	"_PUBLIC",
	"_PACKAGE",
	"_OPTION",
	"_TRUE",
	"_FALSE",
	"_INF",
	"_NAN",
	"_REPEATED",
	"_OPTIONAL",
	"_REQUIRED",
	"_DOUBLE",
	"_FLOAT",
	"_INT32",
	"_INT64",
	"_UINT32",
	"_UINT64",
	"_SINT32",
	"_SINT64",
	"_FIXED32",
	"_FIXED64",
	"_SFIXED32",
	"_SFIXED64",
	"_BOOL",
	"_STRING",
	"_BYTES",
	"_GROUP",
	"_ONEOF",
	"_MAP",
	"_EXTENSIONS",
	"_TO",
	"_MAX",
	"_RESERVED",
	"_ENUM",
	"_MESSAGE",
	"_EXTEND",
	"_SERVICE",
	"_RPC",
	"_STREAM",
	"_RETURNS",
	"_ERROR",
	"'='",
	"';'",
	"':'",
	"'{'",
	"'}'",
	"'\\\\'",
	"'/'",
	"'?'",
	"'.'",
	"','",
	"'>'",
	"'<'",
	"'+'",
	"'-'",
	"'('",
	"')'",
	"'['",
	"']'",
	"'*'",
	"'&'",
	"'^'",
	"'%'",
	"'$'",
	"'#'",
	"'@'",
	"'!'",
	"'~'",
	"'`'",
}
var protoStatenames = [...]string{}

const protoEofCode = 1
const protoErrCode = 2
const protoInitialStackSize = 16

//line proto.y:1026

//line yacctab:1
var protoExca = [...]int{
	-1, 0,
	1, 4,
	-2, 0,
	-1, 1,
	1, -1,
	-2, 0,
	-1, 2,
	1, 1,
	-2, 0,
	-1, 3,
	1, 2,
	-2, 0,
	-1, 22,
	1, 3,
	-2, 0,
	-1, 98,
	57, 169,
	-2, 0,
	-1, 99,
	57, 157,
	-2, 0,
	-1, 100,
	57, 186,
	-2, 0,
	-1, 104,
	57, 195,
	-2, 0,
	-1, 117,
	57, 57,
	-2, 0,
	-1, 237,
	63, 57,
	-2, 0,
	-1, 254,
	57, 110,
	-2, 0,
	-1, 280,
	63, 57,
	-2, 0,
	-1, 324,
	63, 57,
	-2, 0,
	-1, 362,
	57, 169,
	-2, 0,
	-1, 365,
	57, 169,
	-2, 0,
	-1, 368,
	57, 169,
	-2, 0,
	-1, 378,
	63, 57,
	-2, 0,
	-1, 380,
	63, 57,
	-2, 0,
	-1, 401,
	57, 169,
	-2, 0,
	-1, 412,
	57, 207,
	-2, 0,
}

const protoPrivate = 57344

const protoLast = 2708

var protoAct = [...]int{

	32, 131, 8, 414, 8, 8, 123, 124, 177, 77,
	317, 296, 83, 301, 217, 218, 204, 110, 114, 80,
	81, 189, 87, 111, 8, 176, 169, 130, 140, 30,
	78, 125, 109, 203, 112, 149, 152, 31, 354, 339,
	249, 162, 399, 250, 355, 366, 353, 338, 251, 82,
	26, 363, 360, 346, 352, 252, 336, 252, 312, 88,
	252, 409, 91, 92, 284, 283, 252, 252, 252, 350,
	391, 252, 276, 252, 329, 220, 29, 220, 122, 220,
	235, 117, 234, 211, 234, 375, 234, 94, 311, 237,
	233, 406, 233, 404, 233, 382, 234, 116, 103, 274,
	158, 153, 234, 101, 233, 359, 170, 273, 97, 257,
	233, 328, 256, 316, 234, 167, 232, 258, 181, 94,
	251, 417, 233, 411, 231, 412, 376, 401, 164, 368,
	90, 194, 163, 108, 17, 160, 221, 365, 221, 95,
	221, 202, 81, 80, 173, 362, 254, 206, 207, 104,
	420, 191, 158, 153, 100, 102, 99, 17, 78, 98,
	90, 173, 407, 387, 93, 90, 196, 198, 200, 385,
	170, 95, 82, 416, 17, 228, 418, 181, 219, 90,
	107, 383, 208, 210, 374, 230, 369, 160, 213, 164,
	349, 174, 343, 163, 210, 226, 172, 242, 243, 244,
	245, 246, 247, 223, 236, 103, 293, 227, 174, 417,
	106, 238, 240, 172, 224, 105, 225, 214, 195, 191,
	175, 25, 17, 373, 372, 340, 291, 290, 298, 89,
	289, 272, 14, 288, 219, 287, 116, 286, 181, 255,
	4, 15, 248, 215, 16, 17, 96, 24, 275, 29,
	253, 128, 11, 277, 11, 11, 302, 27, 28, 279,
	390, 416, 297, 281, 389, 78, 299, 335, 294, 334,
	285, 333, 186, 187, 11, 19, 18, 20, 21, 116,
	332, 181, 181, 307, 13, 188, 331, 14, 314, 330,
	230, 315, 219, 310, 219, 309, 15, 183, 184, 16,
	17, 205, 302, 29, 205, 319, 325, 292, 344, 345,
	185, 323, 186, 90, 342, 29, 313, 171, 3, 126,
	10, 22, 10, 10, 168, 181, 181, 12, 161, 307,
	19, 18, 20, 21, 230, 154, 337, 151, 129, 13,
	348, 116, 10, 216, 5, 155, 134, 351, 23, 297,
	356, 370, 78, 347, 116, 116, 209, 181, 300, 127,
	9, 147, 9, 9, 133, 230, 304, 23, 132, 384,
	303, 178, 386, 371, 361, 388, 364, 321, 367, 181,
	180, 181, 9, 84, 259, 115, 377, 379, 113, 190,
	413, 295, 194, 181, 194, 181, 194, 7, 6, 2,
	1, 230, 402, 230, 392, 0, 394, 0, 408, 0,
	0, 0, 0, 0, 415, 415, 194, 419, 0, 0,
	319, 0, 0, 0, 0, 0, 322, 0, 29, 118,
	121, 34, 0, 400, 35, 36, 37, 38, 39, 40,
	41, 42, 43, 44, 45, 46, 47, 48, 49, 50,
	51, 52, 53, 54, 55, 56, 57, 58, 59, 60,
	61, 62, 63, 64, 65, 66, 67, 68, 69, 70,
	71, 72, 73, 74, 75, 76, 0, 0, 0, 0,
	117, 0, 0, 0, 0, 0, 0, 0, 324, 119,
	120, 0, 0, 0, 320, 29, 118, 121, 34, 0,
	0, 35, 36, 37, 38, 39, 40, 41, 42, 43,
	44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
	54, 55, 56, 57, 58, 59, 60, 61, 62, 63,
	64, 65, 66, 67, 68, 69, 70, 71, 72, 73,
	74, 75, 76, 0, 0, 0, 0, 117, 0, 0,
	0, 0, 0, 0, 0, 280, 119, 120, 0, 0,
	278, 29, 118, 121, 34, 0, 0, 35, 36, 37,
	38, 39, 40, 41, 42, 43, 44, 45, 46, 47,
	48, 49, 50, 51, 52, 53, 54, 55, 56, 57,
	58, 59, 60, 61, 62, 63, 64, 65, 66, 67,
	68, 69, 70, 71, 72, 73, 74, 75, 76, 0,
	0, 0, 0, 117, 0, 0, 0, 0, 0, 0,
	0, 380, 119, 120, 29, 118, 121, 34, 0, 0,
	35, 36, 37, 38, 39, 40, 41, 42, 43, 44,
	45, 46, 47, 48, 49, 50, 51, 52, 53, 54,
	55, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 0, 0, 0, 0, 117, 0, 0, 0,
	0, 0, 179, 0, 378, 119, 120, 34, 0, 0,
	35, 36, 37, 38, 39, 40, 41, 42, 43, 44,
	45, 46, 47, 48, 49, 50, 51, 52, 53, 54,
	55, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 179, 405, 0, 0, 0, 34, 0, 182,
	35, 36, 37, 38, 39, 40, 41, 42, 43, 44,
	45, 46, 47, 48, 49, 50, 51, 52, 53, 54,
	55, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 179, 403, 0, 0, 0, 34, 0, 182,
	35, 36, 37, 38, 39, 40, 41, 42, 43, 44,
	45, 46, 47, 48, 49, 50, 51, 52, 53, 54,
	55, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 381, 29, 118, 121, 34, 0, 182,
	35, 36, 37, 38, 39, 40, 41, 42, 43, 44,
	45, 46, 47, 48, 49, 50, 51, 52, 53, 54,
	55, 56, 57, 58, 59, 60, 61, 62, 63, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 0, 0, 0, 0, 117, 0, 0, 179,
	0, 0, 0, 0, 34, 119, 120, 35, 36, 37,
	38, 39, 40, 41, 42, 43, 44, 45, 46, 47,
	48, 49, 50, 51, 52, 53, 54, 55, 56, 57,
	58, 59, 60, 61, 62, 63, 64, 65, 66, 67,
	68, 69, 70, 71, 72, 73, 74, 75, 76, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 179,
	358, 0, 0, 0, 34, 0, 182, 35, 36, 37,
	38, 39, 40, 41, 42, 43, 44, 45, 46, 47,
	48, 49, 50, 51, 52, 53, 54, 55, 56, 57,
	58, 59, 60, 61, 62, 63, 64, 65, 66, 67,
	68, 69, 70, 71, 72, 73, 74, 75, 76, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 179,
	327, 0, 0, 0, 34, 0, 182, 35, 36, 37,
	38, 39, 40, 41, 42, 43, 44, 45, 46, 47,
	48, 49, 50, 51, 52, 53, 54, 55, 56, 57,
	58, 59, 60, 61, 62, 63, 64, 65, 66, 67,
	68, 69, 70, 71, 72, 73, 74, 75, 76, 0,
	0, 0, 0, 0, 229, 0, 0, 0, 0, 395,
	0, 0, 0, 0, 34, 0, 182, 35, 36, 37,
	38, 39, 40, 41, 42, 43, 44, 45, 46, 47,
	48, 49, 50, 51, 52, 53, 54, 55, 56, 57,
	58, 59, 60, 61, 62, 63, 64, 65, 66, 67,
	68, 69, 70, 71, 72, 73, 74, 75, 76, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 393,
	0, 0, 0, 0, 34, 0, 182, 35, 36, 37,
	38, 39, 40, 41, 42, 43, 44, 45, 46, 47,
	48, 49, 50, 51, 52, 53, 54, 55, 56, 57,
	58, 59, 60, 61, 62, 63, 64, 65, 66, 67,
	68, 69, 70, 71, 72, 73, 74, 75, 76, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 357,
	0, 0, 0, 0, 34, 0, 182, 35, 36, 37,
	38, 39, 40, 41, 42, 43, 44, 45, 46, 47,
	48, 49, 50, 51, 52, 53, 54, 55, 56, 57,
	58, 59, 60, 61, 62, 63, 64, 65, 66, 67,
	68, 69, 70, 71, 72, 73, 74, 75, 76, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 326,
	0, 0, 0, 0, 34, 0, 182, 35, 36, 37,
	38, 39, 40, 41, 42, 43, 44, 45, 46, 47,
	48, 49, 50, 51, 52, 53, 54, 55, 56, 57,
	58, 59, 60, 61, 62, 63, 64, 65, 66, 67,
	68, 69, 70, 71, 72, 73, 74, 75, 76, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 282,
	0, 0, 0, 0, 34, 0, 182, 35, 36, 37,
	38, 39, 40, 41, 42, 43, 44, 45, 46, 47,
	48, 49, 50, 51, 52, 53, 54, 55, 56, 57,
	58, 59, 60, 61, 62, 63, 64, 65, 66, 67,
	68, 69, 70, 71, 72, 73, 74, 75, 76, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 179,
	0, 0, 0, 0, 34, 0, 182, 35, 36, 37,
	38, 39, 40, 41, 42, 43, 44, 45, 46, 47,
	48, 49, 50, 51, 52, 53, 54, 55, 56, 57,
	58, 59, 60, 61, 62, 63, 64, 65, 66, 67,
	68, 69, 70, 71, 72, 73, 74, 75, 76, 260,
	261, 262, 263, 264, 265, 266, 267, 268, 269, 270,
	271, 0, 0, 0, 34, 33, 182, 35, 36, 37,
	38, 39, 40, 41, 42, 43, 44, 45, 46, 47,
	48, 49, 50, 51, 52, 53, 54, 55, 56, 57,
	58, 59, 60, 61, 62, 63, 64, 65, 66, 67,
	68, 69, 70, 71, 72, 73, 74, 75, 76, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 34, 33, 79, 35, 36, 37, 38, 39,
	40, 41, 42, 43, 44, 45, 46, 47, 48, 49,
	50, 51, 52, 53, 54, 55, 56, 57, 58, 59,
	60, 61, 62, 63, 64, 65, 66, 67, 68, 69,
	70, 71, 72, 73, 74, 75, 76, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 136, 0,
	0, 0, 241, 34, 33, 86, 35, 36, 37, 38,
	39, 145, 41, 42, 43, 44, 139, 138, 137, 48,
	49, 50, 51, 52, 53, 54, 55, 56, 57, 58,
	59, 60, 61, 62, 63, 146, 150, 144, 67, 68,
	148, 141, 142, 143, 73, 74, 75, 76, 0, 0,
	135, 0, 0, 410, 136, 0, 0, 85, 0, 34,
	33, 86, 35, 36, 37, 38, 39, 145, 41, 42,
	43, 44, 139, 138, 137, 48, 49, 50, 51, 52,
	53, 54, 55, 56, 57, 58, 59, 60, 61, 62,
	63, 146, 150, 144, 67, 68, 148, 141, 142, 143,
	73, 74, 75, 76, 0, 0, 135, 0, 0, 398,
	136, 0, 0, 85, 0, 34, 33, 86, 35, 36,
	37, 38, 39, 145, 41, 42, 43, 44, 139, 138,
	137, 48, 49, 50, 51, 52, 53, 54, 55, 56,
	57, 58, 59, 60, 61, 62, 63, 146, 150, 144,
	67, 68, 148, 141, 142, 143, 73, 74, 75, 76,
	0, 0, 135, 0, 0, 397, 136, 0, 0, 85,
	0, 34, 33, 86, 35, 36, 37, 38, 39, 145,
	41, 42, 43, 44, 139, 138, 137, 48, 49, 50,
	51, 52, 53, 54, 55, 56, 57, 58, 59, 60,
	61, 62, 63, 146, 150, 144, 67, 68, 148, 141,
	142, 143, 73, 74, 75, 76, 0, 0, 135, 0,
	0, 396, 306, 0, 0, 85, 0, 34, 33, 86,
	35, 36, 37, 38, 39, 145, 41, 42, 43, 44,
	45, 46, 47, 48, 49, 50, 51, 52, 53, 54,
	55, 56, 57, 58, 59, 60, 61, 62, 308, 64,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 0, 0, 305, 0, 0, 341, 166, 0,
	0, 85, 0, 34, 33, 86, 35, 36, 37, 38,
	39, 40, 41, 42, 43, 44, 139, 138, 137, 48,
	49, 50, 51, 52, 53, 54, 55, 56, 57, 58,
	59, 60, 61, 62, 63, 64, 65, 66, 67, 68,
	69, 70, 71, 72, 73, 74, 75, 76, 0, 0,
	165, 0, 0, 222, 136, 0, 0, 85, 0, 34,
	33, 86, 35, 36, 37, 38, 39, 145, 41, 42,
	43, 44, 139, 138, 137, 48, 49, 50, 51, 52,
	53, 54, 55, 56, 57, 58, 59, 60, 61, 62,
	63, 146, 150, 144, 67, 68, 148, 141, 142, 143,
	73, 74, 75, 76, 0, 0, 135, 0, 0, 193,
	136, 0, 0, 85, 0, 34, 33, 86, 35, 36,
	37, 38, 39, 145, 41, 42, 43, 44, 139, 138,
	137, 48, 49, 50, 51, 52, 53, 54, 55, 56,
	57, 58, 59, 60, 61, 62, 63, 146, 150, 144,
	67, 68, 148, 141, 142, 143, 73, 74, 75, 76,
	0, 0, 135, 0, 0, 306, 0, 0, 0, 85,
	34, 33, 86, 35, 36, 37, 38, 39, 145, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 308, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 0, 0, 305, 0, 0,
	166, 0, 0, 0, 85, 34, 33, 86, 35, 36,
	37, 38, 39, 40, 41, 42, 43, 44, 139, 138,
	137, 48, 49, 50, 51, 52, 53, 54, 55, 56,
	57, 58, 59, 60, 61, 62, 63, 64, 65, 66,
	67, 68, 69, 70, 71, 72, 73, 74, 75, 76,
	0, 0, 165, 0, 0, 239, 0, 0, 0, 85,
	34, 33, 86, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 85, 34, 33, 86, 35, 36,
	37, 38, 39, 40, 41, 42, 43, 44, 45, 46,
	47, 48, 49, 50, 51, 52, 53, 54, 55, 56,
	57, 58, 59, 60, 61, 62, 63, 64, 65, 66,
	67, 68, 69, 70, 71, 72, 73, 74, 318, 76,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 85,
	34, 33, 86, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 85, 34, 33, 86, 35, 36,
	37, 38, 39, 40, 41, 42, 43, 44, 45, 46,
	47, 48, 49, 50, 51, 52, 53, 54, 55, 56,
	57, 58, 59, 60, 61, 62, 63, 64, 65, 66,
	67, 68, 69, 70, 71, 72, 73, 74, 75, 76,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 192,
	34, 33, 86, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 201, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 85, 34, 33, 86, 35, 36,
	37, 38, 39, 40, 41, 42, 43, 44, 45, 46,
	47, 48, 49, 50, 51, 52, 53, 54, 55, 56,
	57, 58, 59, 60, 61, 62, 199, 64, 65, 66,
	67, 68, 69, 70, 71, 72, 73, 74, 75, 76,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 85,
	34, 33, 86, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 197, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 0, 0, 157, 0, 0,
	0, 0, 34, 0, 85, 35, 36, 37, 38, 39,
	145, 41, 42, 43, 44, 45, 46, 47, 48, 49,
	50, 51, 52, 53, 54, 55, 56, 57, 58, 59,
	60, 61, 62, 63, 64, 65, 66, 67, 68, 159,
	70, 71, 72, 73, 74, 75, 76, 0, 157, 156,
	0, 0, 212, 34, 0, 0, 35, 36, 37, 38,
	39, 145, 41, 42, 43, 44, 45, 46, 47, 48,
	49, 50, 51, 52, 53, 54, 55, 56, 57, 58,
	59, 60, 61, 62, 63, 64, 65, 66, 67, 68,
	159, 70, 71, 72, 73, 74, 75, 76, 34, 33,
	156, 35, 36, 37, 38, 39, 40, 41, 42, 43,
	44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
	54, 55, 56, 57, 58, 59, 60, 61, 62, 63,
	64, 65, 66, 67, 68, 69, 70, 71, 72, 73,
	74, 75, 76, 34, 0, 0, 35, 36, 37, 38,
	39, 40, 41, 42, 43, 44, 45, 46, 47, 48,
	49, 50, 51, 52, 53, 54, 55, 56, 57, 58,
	59, 60, 61, 62, 63, 64, 65, 66, 67, 68,
	69, 70, 71, 72, 73, 74, 75, 76,
}
var protoPact = [...]int{

	230, -1000, 285, 285, 194, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 167, 245, 2611, 1457, 2656, 2656,
	2243, 2656, 285, -1000, 311, -1000, 175, 311, 311, -1000,
	110, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 193, 78, 2243,
	103, 100, 98, 78, 94, 2611, -1000, 93, 161, -1000,
	-1000, 156, 126, -1000, -1000, 2611, 860, 10, 1968, 2566,
	2078, -1000, 2611, 78, 142, -1000, -1000, -1000, -1000, 166,
	-1000, -1000, 309, -1000, -1000, -1000, -1000, 1397, -1000, 292,
	267, -1000, 2298, 1912, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 164, 2463, 2408, 2353,
	2656, 2656, 2656, 2243, 296, 1457, 2656, 2656, 299, -1000,
	19, 2515, -1000, -1000, -1000, -1000, -1000, 163, 190, 72,
	-1000, 1856, -1000, -1000, -1000, -1000, 160, 78, 159, -1000,
	-1000, -1000, -1000, 153, 2656, -1000, 1037, -1000, 62, 60,
	25, -1000, 2133, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	2298, -1000, 1515, -1000, -1000, -1000, 2656, 2656, 2656, 2656,
	2656, 2656, 189, -14, -1000, 208, 90, 186, 58, 55,
	309, 1424, -1000, -1000, -1000, 74, 45, -1000, 206, -1000,
	-1000, 307, -1000, -1000, -1000, -1000, -1000, -1000, 5, -1000,
	-1000, -1000, -1000, -1000, -1000, 491, -1000, 1337, -5, -6,
	-1000, 2243, 184, 182, 180, 177, 174, 173, 302, -1000,
	152, 296, 1457, 223, 2023, 290, -1000, -1000, 311, 26,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 4, 74, -1000, 70, 2188, -1000, 424, -1000,
	1277, 977, 48, -1000, -1000, 6, 284, 281, 275, 266,
	264, 262, 2, -1000, -1000, -23, -1000, 172, -1000, -1000,
	1800, -1000, -1000, -1000, -1000, -1000, 138, 2656, 2656, -1,
	309, 2243, -1000, 136, -1000, -1000, -1000, 1, 2243, -1000,
	-1000, -16, -26, -1000, 1217, 917, 42, -1000, -1000, -1000,
	-2, 89, -3, 81, -9, 73, -1000, 132, -1000, 1457,
	860, -1000, -1000, -1000, 171, 170, -1000, 130, 22, -1000,
	75, -1000, -1000, 620, 557, -1000, 800, 32, -1000, -1000,
	-1000, 127, 1968, -1000, 115, 1968, -1000, 109, 1968, -1000,
	-1000, -1000, 259, 255, -1000, -1000, 3, -1000, 1157, -1000,
	1097, -1000, -1000, -1000, 1744, -1000, 1688, -1000, 1632, -12,
	71, 2188, 740, 30, 680, 28, -1000, -1000, -1000, -1000,
	108, 1968, -7, -1000, -1000, -1000, -1000, -1000, 1576, 69,
	-1000, -1000, 207, 119, -1000, -1000, -1000, 96, -1000, -1000,
	-1000,
}
var protoPgo = [...]int{

	0, 400, 399, 344, 318, 398, 397, 1, 11, 391,
	3, 390, 9, 21, 389, 43, 32, 17, 23, 388,
	385, 15, 18, 0, 384, 37, 12, 28, 383, 380,
	377, 25, 8, 371, 31, 370, 368, 27, 366, 364,
	361, 359, 7, 6, 13, 358, 356, 346, 345, 35,
	16, 33, 14, 343, 338, 319, 36, 337, 335, 251,
	41, 328, 34, 327, 26, 324, 317, 10,
}
var protoR1 = [...]int{

	0, 1, 1, 1, 1, 4, 4, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 2, 5, 5,
	5, 6, 26, 26, 26, 25, 25, 7, 12, 12,
	12, 13, 13, 14, 14, 16, 16, 17, 17, 17,
	17, 17, 19, 19, 22, 21, 21, 20, 20, 20,
	20, 20, 62, 62, 18, 31, 31, 31, 32, 32,
	32, 32, 32, 32, 33, 33, 33, 33, 33, 33,
	33, 33, 33, 33, 29, 29, 29, 30, 30, 30,
	30, 30, 30, 30, 30, 30, 27, 27, 28, 28,
	28, 28, 34, 34, 34, 34, 34, 34, 34, 34,
	15, 9, 9, 8, 37, 37, 37, 36, 45, 45,
	45, 44, 44, 44, 44, 44, 44, 35, 35, 38,
	39, 39, 40, 24, 24, 24, 24, 24, 24, 24,
	24, 24, 24, 24, 24, 54, 54, 51, 51, 50,
	50, 50, 53, 53, 52, 52, 52, 47, 47, 48,
	48, 49, 46, 46, 55, 57, 57, 57, 56, 56,
	56, 56, 56, 56, 58, 58, 41, 43, 43, 43,
	42, 42, 42, 42, 42, 42, 42, 42, 42, 42,
	42, 42, 42, 59, 61, 61, 61, 60, 60, 60,
	60, 60, 63, 65, 65, 65, 64, 64, 64, 64,
	64, 66, 66, 67, 67, 11, 11, 11, 10, 10,
	10, 10, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 23,
}
var protoR2 = [...]int{

	0, 1, 1, 2, 0, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 1, 4, 3, 4,
	4, 3, 1, 2, 3, 1, 1, 5, 1, 3,
	4, 1, 2, 1, 4, 1, 1, 1, 1, 1,
	1, 1, 1, 2, 2, 1, 1, 1, 2, 2,
	2, 2, 1, 2, 3, 1, 2, 0, 1, 2,
	2, 2, 2, 1, 3, 4, 5, 5, 3, 2,
	5, 4, 5, 4, 1, 3, 3, 1, 3, 3,
	3, 5, 5, 3, 5, 5, 1, 1, 2, 1,
	2, 3, 6, 6, 6, 5, 7, 7, 7, 6,
	3, 3, 1, 3, 8, 8, 8, 5, 2, 1,
	0, 1, 1, 1, 1, 2, 1, 5, 6, 7,
	5, 6, 6, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 3, 4, 3, 1, 1,
	3, 3, 3, 1, 1, 3, 3, 3, 1, 3,
	1, 3, 3, 1, 5, 2, 1, 0, 1, 1,
	1, 1, 2, 1, 4, 5, 5, 2, 1, 0,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 1, 5, 2, 1, 0, 1, 1, 1,
	2, 1, 5, 2, 1, 0, 1, 1, 1, 2,
	1, 10, 12, 2, 1, 2, 1, 0, 1, 1,
	2, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1,
}
var protoChk = [...]int{

	-1000, -1, -2, -4, 10, -3, -5, -6, -7, -41,
	-55, -59, -63, 54, 2, 11, 14, 15, 46, 45,
	47, 48, -4, -3, 53, 54, -62, 12, 13, 4,
	-26, -25, -23, 8, 7, 10, 11, 12, 13, 14,
	15, 16, 17, 18, 19, 20, 21, 22, 23, 24,
	25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
	35, 36, 37, 38, 39, 40, 41, 42, 43, 44,
	45, 46, 47, 48, 49, 50, 51, -12, -26, 67,
	-23, -23, -27, -26, -28, 61, 9, -23, -62, 54,
	4, -62, -62, 54, 9, 61, 53, -27, 56, 56,
	56, 9, 61, -26, 56, 54, 54, 54, -25, -16,
	-17, -18, -62, -19, -22, -20, -23, 56, 5, 65,
	66, 6, 68, -43, -42, -34, -55, -41, -59, -54,
	-37, -7, -36, -39, -47, 54, 2, 22, 21, 20,
	-27, 45, 46, 47, 41, 15, 39, -40, 44, -49,
	40, -57, -56, -7, -58, -48, 54, 2, -23, 44,
	-49, -61, -60, -34, -37, 54, 2, -26, -65, -64,
	-7, -66, 54, 2, 49, 54, -31, -32, -33, 2,
	-29, -23, 69, 5, 6, 18, 5, 6, 18, -13,
	-14, -27, 61, 57, -42, 54, -27, 38, -27, 38,
	-27, 38, -23, -51, -50, 5, -23, -23, -51, -46,
	-62, 64, 57, -56, 54, 53, -53, -52, -21, -22,
	5, 66, 57, -60, 54, 57, -64, 54, -23, 57,
	-32, 62, 54, 62, 54, 55, -18, 64, -27, 2,
	-13, 67, -23, -23, -23, -23, -23, -23, 53, 54,
	-15, 62, 69, 42, 56, 53, 54, 54, 62, -24,
	25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
	35, 36, -21, 62, 54, 42, 67, -17, 69, -18,
	64, -31, 2, 70, 70, -27, 53, 53, 53, 53,
	53, 53, 5, 54, -50, -9, -8, -12, 5, 43,
	-45, -44, -7, -35, -38, 54, 2, -27, 38, 5,
	-62, 62, 54, -15, -52, -21, 43, -67, 50, -27,
	70, -30, 2, -16, 64, -31, 2, 63, 63, 68,
	5, 5, 5, 5, 5, 5, 54, -15, 70, 62,
	53, 57, -44, 54, -23, -23, 54, -15, -27, 54,
	68, -27, 70, 62, 54, 70, -31, 2, 63, 63,
	54, -15, 56, 54, -15, 56, 54, -15, 56, 54,
	-8, -16, 53, 53, 54, 63, 51, -16, 64, -16,
	64, 63, 63, 54, -43, 54, -43, 54, -43, 5,
	5, 67, -31, 2, -31, 2, 57, 57, 57, 54,
	-15, 56, -67, 63, 63, 63, 63, 54, -43, 68,
	57, 54, 56, -11, -10, -7, 54, 2, 57, -10,
	54,
}
var protoDef = [...]int{

	-2, -2, -2, -2, 0, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 16, 0, 0, 0, 0, 0,
	0, 0, -2, 5, 0, 15, 0, 0, 0, 52,
	0, 22, 25, 26, 212, 213, 214, 215, 216, 217,
	218, 219, 220, 221, 222, 223, 224, 225, 226, 227,
	228, 229, 230, 231, 232, 233, 234, 235, 236, 237,
	238, 239, 240, 241, 242, 243, 244, 245, 246, 247,
	248, 249, 250, 251, 252, 253, 254, 0, 28, 0,
	0, 0, 0, 86, 87, 0, 89, 0, 0, 18,
	53, 0, 0, 21, 23, 0, 0, 0, -2, -2,
	-2, 90, 0, 88, -2, 17, 19, 20, 24, 0,
	35, 36, 37, 38, 39, 40, 41, -2, 42, 0,
	0, 47, 29, 0, 168, 170, 171, 172, 173, 174,
	175, 176, 177, 178, 179, 180, 182, 0, 0, 0,
	0, 248, 249, 0, 244, 218, 242, 0, 247, 148,
	243, 0, 156, 158, 159, 160, 161, 163, 0, 247,
	150, 0, 185, 187, 188, 189, 191, 91, 0, 194,
	196, 197, 198, 200, 0, 27, 0, 55, 58, 63,
	0, 74, 0, 43, 49, 50, 44, 48, 51, 30,
	31, 33, 0, 166, 167, 181, 0, 241, 0, 241,
	0, 241, 0, 0, 138, 139, 0, 0, 0, 0,
	153, 0, 154, 155, 162, 0, 0, 143, 144, 45,
	46, 0, 183, 184, 190, 192, 193, 199, 0, 54,
	56, 59, 60, 61, 62, 0, 69, -2, 0, 0,
	32, 0, 0, 0, 0, 0, 0, 0, 0, 135,
	0, 0, 0, 0, -2, 0, 147, 151, 0, 0,
	123, 124, 125, 126, 127, 128, 129, 130, 131, 132,
	133, 134, 0, 0, 149, 0, 0, 64, 0, 68,
	-2, 0, 63, 75, 76, 0, 0, 0, 0, 0,
	0, 0, 0, 136, 137, 0, 102, 0, 140, 141,
	0, 109, 111, 112, 113, 114, 116, 0, 241, 0,
	152, 0, 164, 0, 142, 145, 146, 0, 253, 204,
	65, 0, 0, 77, -2, 0, 63, 71, 73, 34,
	0, 0, 0, 0, 0, 0, 95, 0, 100, 0,
	0, 107, 108, 115, 0, 0, 120, 0, 0, 165,
	0, 203, 66, 0, 0, 67, 0, 63, 70, 72,
	92, 0, -2, 93, 0, -2, 94, 0, -2, 99,
	101, 103, 0, 0, 121, 122, 0, 78, -2, 79,
	-2, 80, 83, 96, 0, 97, 0, 98, 0, 0,
	0, 0, 0, 63, 0, 63, 104, 105, 106, 117,
	0, -2, 0, 81, 84, 82, 85, 118, 0, 0,
	119, 201, -2, 0, 206, 208, 209, 211, 202, 205,
	210,
}
var protoTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 78, 3, 76, 75, 74, 72, 3,
	67, 68, 71, 65, 62, 66, 61, 59, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 55, 54,
	64, 53, 63, 60, 77, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 69, 58, 70, 73, 3, 80, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 56, 3, 57, 79,
}
var protoTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52,
}
var protoTok3 = [...]int{
	0,
}

var protoErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	protoDebug        = 0
	protoErrorVerbose = false
)

type protoLexer interface {
	Lex(lval *protoSymType) int
	Error(s string)
}

type protoParser interface {
	Parse(protoLexer) int
	Lookahead() int
}

type protoParserImpl struct {
	lval  protoSymType
	stack [protoInitialStackSize]protoSymType
	char  int
}

func (p *protoParserImpl) Lookahead() int {
	return p.char
}

func protoNewParser() protoParser {
	return &protoParserImpl{}
}

const protoFlag = -1000

func protoTokname(c int) string {
	if c >= 1 && c-1 < len(protoToknames) {
		if protoToknames[c-1] != "" {
			return protoToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func protoStatname(s int) string {
	if s >= 0 && s < len(protoStatenames) {
		if protoStatenames[s] != "" {
			return protoStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func protoErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !protoErrorVerbose {
		return "syntax error"
	}

	for _, e := range protoErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + protoTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := protoPact[state]
	for tok := TOKSTART; tok-1 < len(protoToknames); tok++ {
		if n := base + tok; n >= 0 && n < protoLast && protoChk[protoAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if protoDef[state] == -2 {
		i := 0
		for protoExca[i] != -1 || protoExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; protoExca[i] >= 0; i += 2 {
			tok := protoExca[i]
			if tok < TOKSTART || protoExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if protoExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += protoTokname(tok)
	}
	return res
}

func protolex1(lex protoLexer, lval *protoSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = protoTok1[0]
		goto out
	}
	if char < len(protoTok1) {
		token = protoTok1[char]
		goto out
	}
	if char >= protoPrivate {
		if char < protoPrivate+len(protoTok2) {
			token = protoTok2[char-protoPrivate]
			goto out
		}
	}
	for i := 0; i < len(protoTok3); i += 2 {
		token = protoTok3[i+0]
		if token == char {
			token = protoTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = protoTok2[1] /* unknown char */
	}
	if protoDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", protoTokname(token), uint(char))
	}
	return char, token
}

func protoParse(protolex protoLexer) int {
	return protoNewParser().Parse(protolex)
}

func (protorcvr *protoParserImpl) Parse(protolex protoLexer) int {
	var proton int
	var protoVAL protoSymType
	var protoDollar []protoSymType
	_ = protoDollar // silence set and not used
	protoS := protorcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	protostate := 0
	protorcvr.char = -1
	prototoken := -1 // protorcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		protostate = -1
		protorcvr.char = -1
		prototoken = -1
	}()
	protop := -1
	goto protostack

ret0:
	return 0

ret1:
	return 1

protostack:
	/* put a state and value onto the stack */
	if protoDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", protoTokname(prototoken), protoStatname(protostate))
	}

	protop++
	if protop >= len(protoS) {
		nyys := make([]protoSymType, len(protoS)*2)
		copy(nyys, protoS)
		protoS = nyys
	}
	protoS[protop] = protoVAL
	protoS[protop].yys = protostate

protonewstate:
	proton = protoPact[protostate]
	if proton <= protoFlag {
		goto protodefault /* simple state */
	}
	if protorcvr.char < 0 {
		protorcvr.char, prototoken = protolex1(protolex, &protorcvr.lval)
	}
	proton += prototoken
	if proton < 0 || proton >= protoLast {
		goto protodefault
	}
	proton = protoAct[proton]
	if protoChk[proton] == prototoken { /* valid shift */
		protorcvr.char = -1
		prototoken = -1
		protoVAL = protorcvr.lval
		protostate = proton
		if Errflag > 0 {
			Errflag--
		}
		goto protostack
	}

protodefault:
	/* default state action */
	proton = protoDef[protostate]
	if proton == -2 {
		if protorcvr.char < 0 {
			protorcvr.char, prototoken = protolex1(protolex, &protorcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if protoExca[xi+0] == -1 && protoExca[xi+1] == protostate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			proton = protoExca[xi+0]
			if proton < 0 || proton == prototoken {
				break
			}
		}
		proton = protoExca[xi+1]
		if proton < 0 {
			goto ret0
		}
	}
	if proton == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			protolex.Error(protoErrorMessage(protostate, prototoken))
			Nerrs++
			if protoDebug >= 1 {
				__yyfmt__.Printf("%s", protoStatname(protostate))
				__yyfmt__.Printf(" saw %s\n", protoTokname(prototoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for protop >= 0 {
				proton = protoPact[protoS[protop].yys] + protoErrCode
				if proton >= 0 && proton < protoLast {
					protostate = protoAct[proton] /* simulate a shift of "error" */
					if protoChk[protostate] == protoErrCode {
						goto protostack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if protoDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", protoS[protop].yys)
				}
				protop--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if protoDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", protoTokname(prototoken))
			}
			if prototoken == protoEofCode {
				goto ret1
			}
			protorcvr.char = -1
			prototoken = -1
			goto protonewstate /* try again in the same state */
		}
	}

	/* reduction by production proton */
	if protoDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", proton, protoStatname(protostate))
	}

	protont := proton
	protopt := protop
	_ = protopt // guard against "declared and not used"

	protop -= protoR2[proton]
	// protop is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if protop+1 >= len(protoS) {
		nyys := make([]protoSymType, len(protoS)*2)
		copy(nyys, protoS)
		protoS = nyys
	}
	protoVAL = protoS[protop+1]

	/* consult goto table to find next state */
	proton = protoR1[proton]
	protog := protoPgo[proton]
	protoj := protog + protoS[protop].yys + 1

	if protoj >= protoLast {
		protostate = protoAct[protog]
	} else {
		protostate = protoAct[protoj]
		if protoChk[protostate] != -proton {
			protostate = protoAct[protog]
		}
	}
	// dummy call; replaced with literal code
	switch protont {

	case 1:
		protoDollar = protoS[protopt-1 : protopt+1]
//line proto.y:119
		{
			protoVAL.file = &fileNode{syntax: protoDollar[1].syn}
			protoVAL.file.setRange(protoDollar[1].syn, protoDollar[1].syn)
			protolex.(*protoLex).res = protoVAL.file
		}
	case 2:
		protoDollar = protoS[protopt-1 : protopt+1]
//line proto.y:124
		{
			protoVAL.file = &fileNode{decls: protoDollar[1].fileDecls}
			if len(protoDollar[1].fileDecls) > 0 {
				protoVAL.file.setRange(protoDollar[1].fileDecls[0], protoDollar[1].fileDecls[len(protoDollar[1].fileDecls)-1])
			}
			protolex.(*protoLex).res = protoVAL.file
		}
	case 3:
		protoDollar = protoS[protopt-2 : protopt+1]
//line proto.y:131
		{
			protoVAL.file = &fileNode{syntax: protoDollar[1].syn, decls: protoDollar[2].fileDecls}
			var end node
			if len(protoDollar[2].fileDecls) > 0 {
				end = protoDollar[2].fileDecls[len(protoDollar[2].fileDecls)-1]
			} else {
				end = protoDollar[1].syn
			}
			protoVAL.file.setRange(protoDollar[1].syn, end)
			protolex.(*protoLex).res = protoVAL.file
		}
	case 4:
		protoDollar = protoS[protopt-0 : protopt+1]
//line proto.y:142
		{
		}
	case 5:
		protoDollar = protoS[protopt-2 : protopt+1]
//line proto.y:145
		{
			protoVAL.fileDecls = append(protoDollar[1].fileDecls, protoDollar[2].fileDecls...)
		}
	case 7:
		protoDollar = protoS[protopt-1 : protopt+1]
//line proto.y:150
		{
			protoVAL.fileDecls = []*fileElement{{imp: protoDollar[1].imprt}}
		}
	case 8:
		protoDollar = protoS[protopt-1 : protopt+1]
//line proto.y:153
		{
			protoVAL.fileDecls = []*fileElement{{pkg: protoDollar[1].pkg}}
		}
	case 9:
		protoDollar = protoS[protopt-1 : protopt+1]
//line proto.y:156
		{
			protoVAL.fileDecls = []*fileElement{{option: protoDollar[1].opts[0]}}
		}
	case 10:
		protoDollar = protoS[protopt-1 : protopt+1]
//line proto.y:159
		{
			protoVAL.fileDecls = []*fileElement{{message: protoDollar[1].msg}}
		}
	case 11:
		protoDollar = protoS[protopt-1 : protopt+1]
//line proto.y:162
		{
			protoVAL.fileDecls = []*fileElement{{enum: protoDollar[1].en}}
		}
	case 12:
		protoDollar = protoS[protopt-1 : protopt+1]
//line proto.y:165
		{
			protoVAL.fileDecls = []*fileElement{{extend: protoDollar[1].extend}}
		}
	case 13:
		protoDollar = protoS[protopt-1 : protopt+1]
//line proto.y:168
		{
			protoVAL.fileDecls = []*fileElement{{service: protoDollar[1].svc}}
		}
	case 14:
		protoDollar = protoS[protopt-1 : protopt+1]
//line proto.y:171
		{
			protoVAL.fileDecls = []*fileElement{{empty: protoDollar[1].b}}
		}
	case 15:
		protoDollar = protoS[protopt-2 : protopt+1]
//line proto.y:174
		{
		}
	case 16:
		protoDollar = protoS[protopt-1 : protopt+1]
//line proto.y:176
		{
		}
	case 17:
		protoDollar = protoS[protopt-4 : protopt+1]
//line proto.y:179
		{
			if protoDollar[3].str.val != "proto2" && protoDollar[3].str.val != "proto3" {
				lexError(protolex, protoDollar[3].str.start(), "syntax value must be 'proto2' or 'proto3'")
			}
			protoVAL.syn = &syntaxNode{syntax: protoDollar[3].str}
			protoVAL.syn.setRange(protoDollar[1].id, protoDollar[4].b)
		}
	case 18:
		protoDollar = protoS[protopt-3 : protopt+1]
//line proto.y:187
		{
			protoVAL.imprt = &importNode{name: protoDollar[2].str}
			protoVAL.imprt.setRange(protoDollar[1].id, protoDollar[3].b)
		}
	case 19:
		protoDollar = protoS[protopt-4 : protopt+1]
//line proto.y:191
		{
			protoVAL.imprt = &importNode{name: protoDollar[3].str, weak: true}
			protoVAL.imprt.setRange(protoDollar[1].id, protoDollar[4].b)
		}
	case 20:
		protoDollar = protoS[protopt-4 : protopt+1]
//line proto.y:195
		{
			protoVAL.imprt = &importNode{name: protoDollar[3].str, public: true}
			protoVAL.imprt.setRange(protoDollar[1].id, protoDollar[4].b)
		}
	case 21:
		protoDollar = protoS[protopt-3 : protopt+1]
//line proto.y:200
		{
			protoVAL.pkg = &packageNode{name: protoDollar[2].cid}
			protoVAL.pkg.setRange(protoDollar[1].id, protoDollar[3].b)
		}
	case 22:
		protoDollar = protoS[protopt-1 : protopt+1]
//line proto.y:205
		{
			protoVAL.cid = &compoundIdentNode{val: protoDollar[1].id.val}
			protoVAL.cid.setRange(protoDollar[1].id, protoDollar[1].id)
		}
	case 23:
		protoDollar = protoS[protopt-2 : protopt+1]
//line proto.y:209
		{
			protoVAL.cid = &compoundIdentNode{val: protoDollar[1].cid.val + protoDollar[2].id.val}
			protoVAL.cid.setRange(protoDollar[1].cid, protoDollar[2].id)
		}
	case 24:
		protoDollar = protoS[protopt-3 : protopt+1]
//line proto.y:213
		{
			protoVAL.cid = &compoundIdentNode{val: protoDollar[1].cid.val + "." + protoDollar[3].id.val}
			protoVAL.cid.setRange(protoDollar[1].cid, protoDollar[3].id)
		}
	case 27:
		protoDollar = protoS[protopt-5 : protopt+1]
//line proto.y:221
		{
			n := &optionNameNode{parts: protoDollar[2].optNm}
			n.setRange(protoDollar[2].optNm[0], protoDollar[2].optNm[len(protoDollar[2].optNm)-1])
			o := &optionNode{name: n, val: protoDollar[4].v}
			o.setRange(protoDollar[1].id, protoDollar[5].b)
			protoVAL.opts = []*optionNode{o}
		}
	case 28:
		protoDollar = protoS[protopt-1 : protopt+1]
//line proto.y:229
		{
			protoVAL.optNm = toNameParts(protoDollar[1].cid, 0)
		}
	case 29:
		protoDollar = protoS[protopt-3 : protopt+1]
//line proto.y:232
		{
			p := &optionNamePartNode{text: protoDollar[2].cid, isExtension: true}
			p.setRange(protoDollar[1].b, protoDollar[3].b)
			protoVAL.optNm = []*optionNamePartNode{p}
		}
	case 30:
		protoDollar = protoS[protopt-4 : protopt+1]
//line proto.y:237
		{
			p := &optionNamePartNode{text: protoDollar[2].cid, isExtension: true}
			p.setRange(protoDollar[1].b, protoDollar[3].b)
			ps := make([]*optionNamePartNode, 1, len(protoDollar[4].optNm)+1)
			ps[0] = p
			protoVAL.optNm = append(ps, protoDollar[4].optNm...)
		}
	case 32:
		protoDollar = protoS[protopt-2 : protopt+1]
//line proto.y:246
		{
			protoVAL.optNm = append(protoDollar[1].optNm, protoDollar[2].optNm...)
		}
	case 33:
		protoDollar = protoS[protopt-1 : protopt+1]
//line proto.y:250
		{
			protoVAL.optNm = toNameParts(protoDollar[1].cid, 1 /* exclude leading dot */)
		}
	case 34:
		protoDollar = protoS[protopt-4 : protopt+1]
//line proto.y:253
		{
			p := &optionNamePartNode{text: protoDollar[3].cid, isExtension: true}
			p.setRange(protoDollar[2].b, protoDollar[4].b)
			protoVAL.optNm = []*optionNamePartNode{p}
		}
	case 37:
		protoDollar = protoS[protopt-1 : protopt+1]
//line proto.y:262
		{
			protoVAL.v = protoDollar[1].str
		}
	case 39:
		protoDollar = protoS[protopt-1 : protopt+1]
//line proto.y:266
		{
			protoVAL.v = protoDollar[1].il
		}
	case 41:
		protoDollar = protoS[protopt-1 : protopt+1]
//line proto.y:270
		{
			if protoDollar[1].id.val == "true" {
				protoVAL.v = &boolLiteralNode{identNode: protoDollar[1].id, val: true}
			} else if protoDollar[1].id.val == "false" {
				protoVAL.v = &boolLiteralNode{identNode: protoDollar[1].id, val: false}
			} else if protoDollar[1].id.val == "inf" {
				f := &compoundFloatNode{val: math.Inf(1)}
				f.setRange(protoDollar[1].id, protoDollar[1].id)
				protoVAL.v = f
			} else if protoDollar[1].id.val == "nan" {
				f := &compoundFloatNode{val: math.NaN()}
				f.setRange(protoDollar[1].id, protoDollar[1].id)
				protoVAL.v = f
			} else {
				protoVAL.v = protoDollar[1].id
			}
		}
	case 42:
		protoDollar = protoS[protopt-1 : protopt+1]
//line proto.y:288
		{
			i := &compoundUintNode{val: protoDollar[1].i.val}
			i.setRange(protoDollar[1].i, protoDollar[1].i)
			protoVAL.v = i
		}
	case 43:
		protoDollar = protoS[protopt-2 : protopt+1]
//line proto.y:293
		{
			i := &compoundUintNode{val: protoDollar[2].i.val}
			i.setRange(protoDollar[1].b, protoDollar[2].i)
			protoVAL.v = i
		}
	case 44:
		protoDollar = protoS[protopt-2 : protopt+1]
//line proto.y:299
		{
			if protoDollar[2].i.val > math.MaxInt64+1 {
				lexError(protolex, protoDollar[2].i.start(), fmt.Sprintf("numeric constant %d would underflow (allowed range is %d to %d)", protoDollar[2].i.val, int64(math.MinInt64), int64(math.MaxInt64)))
			}
			i := &compoundIntNode{val: -int64(protoDollar[2].i.val)}
			i.setRange(protoDollar[1].b, protoDollar[2].i)
			protoVAL.il = i
		}
	case 46:
		protoDollar = protoS[protopt-1 : protopt+1]
//line proto.y:309
		{
			// we don't allow uintLit because this is for enum numeric vals, which don't allow '+'
			checkUint64InInt32Range(protolex, protoDollar[1].i.start(), protoDollar[1].i.val)
			i := &compoundIntNode{val: int64(protoDollar[1].i.val)}
			i.setRange(protoDollar[1].i, protoDollar[1].i)
			protoVAL.il = i
		}
	case 47:
		protoDollar = protoS[protopt-1 : protopt+1]
//line proto.y:317
		{
			protoVAL.v = protoDollar[1].f
		}
	case 48:
		protoDollar = protoS[protopt-2 : protopt+1]
//line proto.y:320
		{
			f := &compoundFloatNode{val: -protoDollar[2].f.val}
			f.setRange(protoDollar[1].b, protoDollar[2].f)
			protoVAL.v = f
		}
	case 49:
		protoDollar = protoS[protopt-2 : protopt+1]
//line proto.y:325
		{
			f := &compoundFloatNode{val: protoDollar[2].f.val}
			f.setRange(protoDollar[1].b, protoDollar[2].f)
			protoVAL.v = f
		}
	case 50:
		protoDollar = protoS[protopt-2 : protopt+1]
//line proto.y:330
		{
			f := &compoundFloatNode{val: math.Inf(1)}
			f.setRange(protoDollar[1].b, protoDollar[2].id)
			protoVAL.v = f
		}
	case 51:
		protoDollar = protoS[protopt-2 : protopt+1]
//line proto.y:335
		{
			f := &compoundFloatNode{val: math.Inf(-1)}
			f.setRange(protoDollar[1].b, protoDollar[2].id)
			protoVAL.v = f
		}
	case 52:
		protoDollar = protoS[protopt-1 : protopt+1]
//line proto.y:341
		{
			protoVAL.str = &compoundStringNode{val: protoDollar[1].s.val}
			protoVAL.str.setRange(protoDollar[1].s, protoDollar[1].s)
		}
	case 53:
		protoDollar = protoS[protopt-2 : protopt+1]
//line proto.y:345
		{
			protoVAL.str = &compoundStringNode{val: protoDollar[1].str.val + protoDollar[2].s.val}
			protoVAL.str.setRange(protoDollar[1].str, protoDollar[2].s)
		}
	case 54:
		protoDollar = protoS[protopt-3 : protopt+1]
//line proto.y:350
		{
			a := &aggregateLiteralNode{elements: protoDollar[2].agg}
			a.setRange(protoDollar[1].b, protoDollar[3].b)
			protoVAL.v = a
		}
	case 56:
		protoDollar = protoS[protopt-2 : protopt+1]
//line proto.y:357
		{
			protoVAL.agg = append(protoDollar[1].agg, protoDollar[2].agg...)
		}
	case 57:
		protoDollar = protoS[protopt-0 : protopt+1]
//line proto.y:360
		{
			protoVAL.agg = nil
		}
	case 59:
		protoDollar = protoS[protopt-2 : protopt+1]
//line proto.y:365
		{
			protoVAL.agg = protoDollar[1].agg
		}
	case 60:
		protoDollar = protoS[protopt-2 : protopt+1]
//line proto.y:368
		{
			protoVAL.agg = protoDollar[1].agg
		}
	case 61:
		protoDollar = protoS[protopt-2 : protopt+1]
//line proto.y:371
		{
		}
	case 62:
		protoDollar = protoS[protopt-2 : protopt+1]
//line proto.y:373
		{
		}
	case 63:
		protoDollar = protoS[protopt-1 : protopt+1]
//line proto.y:375
		{
		}
	case 64:
		protoDollar = protoS[protopt-3 : protopt+1]
//line proto.y:378
		{
			a := &aggregateEntryNode{name: protoDollar[1].aggName, val: protoDollar[3].v}
			a.setRange(protoDollar[1].aggName, protoDollar[3].v)
			protoVAL.agg = []*aggregateEntryNode{a}
		}
	case 65:
		protoDollar = protoS[protopt-4 : protopt+1]
//line proto.y:383
		{
			s := &sliceLiteralNode{}
			s.setRange(protoDollar[3].b, protoDollar[4].b)
			a := &aggregateEntryNode{name: protoDollar[1].aggName, val: s}
			a.setRange(protoDollar[1].aggName, protoDollar[4].b)
			protoVAL.agg = []*aggregateEntryNode{a}
		}
	case 66:
		protoDollar = protoS[protopt-5 : protopt+1]
//line proto.y:390
		{
			s := &sliceLiteralNode{elements: protoDollar[4].sl}
			s.setRange(protoDollar[3].b, protoDollar[5].b)
			a := &aggregateEntryNode{name: protoDollar[1].aggName, val: s}
			a.setRange(protoDollar[1].aggName, protoDollar[5].b)
			protoVAL.agg = []*aggregateEntryNode{a}
		}
	case 67:
		protoDollar = protoS[protopt-5 : protopt+1]
//line proto.y:397
		{
		}
	case 68:
		protoDollar = protoS[protopt-3 : protopt+1]
//line proto.y:399
		{
			a := &aggregateEntryNode{name: protoDollar[1].aggName, val: protoDollar[3].v}
			a.setRange(protoDollar[1].aggName, protoDollar[3].v)
			protoVAL.agg = []*aggregateEntryNode{a}
		}
	case 69:
		protoDollar = protoS[protopt-2 : protopt+1]
//line proto.y:404
		{
			a := &aggregateEntryNode{name: protoDollar[1].aggName, val: protoDollar[2].v}
			a.setRange(protoDollar[1].aggName, protoDollar[2].v)
			protoVAL.agg = []*aggregateEntryNode{a}
		}
	case 70:
		protoDollar = protoS[protopt-5 : protopt+1]
//line proto.y:409
		{
			s := &aggregateLiteralNode{elements: protoDollar[4].agg}
			s.setRange(protoDollar[3].b, protoDollar[5].b)
			a := &aggregateEntryNode{name: protoDollar[1].aggName, val: s}
			a.setRange(protoDollar[1].aggName, protoDollar[5].b)
			protoVAL.agg = []*aggregateEntryNode{a}
		}
	case 71:
		protoDollar = protoS[protopt-4 : protopt+1]
//line proto.y:416
		{
			s := &aggregateLiteralNode{elements: protoDollar[3].agg}
			s.setRange(protoDollar[2].b, protoDollar[4].b)
			a := &aggregateEntryNode{name: protoDollar[1].aggName, val: s}
			a.setRange(protoDollar[1].aggName, protoDollar[4].b)
			protoVAL.agg = []*aggregateEntryNode{a}
		}
	case 72:
		protoDollar = protoS[protopt-5 : protopt+1]
//line proto.y:423
		{
		}
	case 73:
		protoDollar = protoS[protopt-4 : protopt+1]
//line proto.y:425
		{
		}
	case 74:
		protoDollar = protoS[protopt-1 : protopt+1]
//line proto.y:428
		{
			n := &compoundIdentNode{val: protoDollar[1].id.val}
			n.setRange(protoDollar[1].id, protoDollar[1].id)
			protoVAL.aggName = &aggregateNameNode{name: n}
			protoVAL.aggName.setRange(protoDollar[1].id, protoDollar[1].id)
		}
	case 75:
		protoDollar = protoS[protopt-3 : protopt+1]
//line proto.y:434
		{
			protoVAL.aggName = &aggregateNameNode{name: protoDollar[2].cid, isExtension: true}
			protoVAL.aggName.setRange(protoDollar[1].b, protoDollar[3].b)
		}
	case 76:
		protoDollar = protoS[protopt-3 : protopt+1]
//line proto.y:438
		{
		}
	case 77:
		protoDollar = protoS[protopt-1 : protopt+1]
//line proto.y:441
		{
			protoVAL.sl = []valueNode{protoDollar[1].v}
		}
	case 78:
		protoDollar = protoS[protopt-3 : protopt+1]
//line proto.y:444
		{
			protoVAL.sl = append(protoDollar[1].sl, protoDollar[3].v)
		}
	case 79:
		protoDollar = protoS[protopt-3 : protopt+1]
//line proto.y:447
		{
			protoVAL.sl = append(protoDollar[1].sl, protoDollar[3].v)
		}
	case 80:
		protoDollar = protoS[protopt-3 : protopt+1]
//line proto.y:450
		{
			s := &aggregateLiteralNode{elements: protoDollar[2].agg}
			s.setRange(protoDollar[1].b, protoDollar[3].b)
			protoVAL.sl = []valueNode{s}
		}
	case 81:
		protoDollar = protoS[protopt-5 : protopt+1]
//line proto.y:455
		{
			s := &aggregateLiteralNode{elements: protoDollar[4].agg}
			s.setRange(protoDollar[3].b, protoDollar[5].b)
			protoVAL.sl = append(protoDollar[1].sl, s)
		}
	case 82:
		protoDollar = protoS[protopt-5 : protopt+1]
//line proto.y:460
		{
			s := &aggregateLiteralNode{elements: protoDollar[4].agg}
			s.setRange(protoDollar[3].b, protoDollar[5].b)
			protoVAL.sl = append(protoDollar[1].sl, s)
		}
	case 83:
		protoDollar = protoS[protopt-3 : protopt+1]
//line proto.y:465
		{
		}
	case 84:
		protoDollar = protoS[protopt-5 : protopt+1]
//line proto.y:467
		{
		}
	case 85:
		protoDollar = protoS[protopt-5 : protopt+1]
//line proto.y:469
		{
		}
	case 88:
		protoDollar = protoS[protopt-2 : protopt+1]
//line proto.y:475
		{
			protoVAL.cid = &compoundIdentNode{val: "." + protoDollar[2].cid.val}
			protoVAL.cid.setRange(protoDollar[1].b, protoDollar[2].cid)
		}
	case 89:
		protoDollar = protoS[protopt-1 : protopt+1]
//line proto.y:479
		{
			protoVAL.cid = &compoundIdentNode{val: protoDollar[1].id.val}
			protoVAL.cid.setRange(protoDollar[1].id, protoDollar[1].id)
		}
	case 90:
		protoDollar = protoS[protopt-2 : protopt+1]
//line proto.y:483
		{
			protoVAL.cid = &compoundIdentNode{val: protoDollar[1].cid.val + protoDollar[2].id.val}
			protoVAL.cid.setRange(protoDollar[1].cid, protoDollar[2].id)
		}
	case 91:
		protoDollar = protoS[protopt-3 : protopt+1]
//line proto.y:487
		{
			protoVAL.cid = &compoundIdentNode{val: protoDollar[1].cid.val + "." + protoDollar[3].cid.val}
			protoVAL.cid.setRange(protoDollar[1].cid, protoDollar[3].cid)
		}
	case 92:
		protoDollar = protoS[protopt-6 : protopt+1]
//line proto.y:492
		{
			checkTag(protolex, protoDollar[5].i.start(), protoDollar[5].i.val)
			lbl := fieldLabel{identNode: protoDollar[1].id, required: true}
			protoVAL.fld = &fieldNode{label: lbl, fldType: protoDollar[2].cid, name: protoDollar[3].id, tag: protoDollar[5].i}
			protoVAL.fld.setRange(protoDollar[1].id, protoDollar[6].b)
		}
	case 93:
		protoDollar = protoS[protopt-6 : protopt+1]
//line proto.y:498
		{
			checkTag(protolex, protoDollar[5].i.start(), protoDollar[5].i.val)
			lbl := fieldLabel{identNode: protoDollar[1].id}
			protoVAL.fld = &fieldNode{label: lbl, fldType: protoDollar[2].cid, name: protoDollar[3].id, tag: protoDollar[5].i}
			protoVAL.fld.setRange(protoDollar[1].id, protoDollar[6].b)
		}
	case 94:
		protoDollar = protoS[protopt-6 : protopt+1]
//line proto.y:504
		{
			checkTag(protolex, protoDollar[5].i.start(), protoDollar[5].i.val)
			lbl := fieldLabel{identNode: protoDollar[1].id, repeated: true}
			protoVAL.fld = &fieldNode{label: lbl, fldType: protoDollar[2].cid, name: protoDollar[3].id, tag: protoDollar[5].i}
			protoVAL.fld.setRange(protoDollar[1].id, protoDollar[6].b)
		}
	case 95:
		protoDollar = protoS[protopt-5 : protopt+1]
//line proto.y:510
		{
			checkTag(protolex, protoDollar[4].i.start(), protoDollar[4].i.val)
			protoVAL.fld = &fieldNode{fldType: protoDollar[1].cid, name: protoDollar[2].id, tag: protoDollar[4].i}
			protoVAL.fld.setRange(protoDollar[1].cid, protoDollar[5].b)
		}
	case 96:
		protoDollar = protoS[protopt-7 : protopt+1]
//line proto.y:515
		{
			checkTag(protolex, protoDollar[5].i.start(), protoDollar[5].i.val)
			lbl := fieldLabel{identNode: protoDollar[1].id, required: true}
			protoVAL.fld = &fieldNode{label: lbl, fldType: protoDollar[2].cid, name: protoDollar[3].id, tag: protoDollar[5].i, options: protoDollar[6].cmpctOpts}
			protoVAL.fld.setRange(protoDollar[1].id, protoDollar[7].b)
		}
	case 97:
		protoDollar = protoS[protopt-7 : protopt+1]
//line proto.y:521
		{
			checkTag(protolex, protoDollar[5].i.start(), protoDollar[5].i.val)
			lbl := fieldLabel{identNode: protoDollar[1].id}
			protoVAL.fld = &fieldNode{label: lbl, fldType: protoDollar[2].cid, name: protoDollar[3].id, tag: protoDollar[5].i, options: protoDollar[6].cmpctOpts}
			protoVAL.fld.setRange(protoDollar[1].id, protoDollar[7].b)
		}
	case 98:
		protoDollar = protoS[protopt-7 : protopt+1]
//line proto.y:527
		{
			checkTag(protolex, protoDollar[5].i.start(), protoDollar[5].i.val)
			lbl := fieldLabel{identNode: protoDollar[1].id, repeated: true}
			protoVAL.fld = &fieldNode{label: lbl, fldType: protoDollar[2].cid, name: protoDollar[3].id, tag: protoDollar[5].i, options: protoDollar[6].cmpctOpts}
			protoVAL.fld.setRange(protoDollar[1].id, protoDollar[7].b)
		}
	case 99:
		protoDollar = protoS[protopt-6 : protopt+1]
//line proto.y:533
		{
			checkTag(protolex, protoDollar[4].i.start(), protoDollar[4].i.val)
			protoVAL.fld = &fieldNode{fldType: protoDollar[1].cid, name: protoDollar[2].id, tag: protoDollar[4].i, options: protoDollar[5].cmpctOpts}
			protoVAL.fld.setRange(protoDollar[1].cid, protoDollar[6].b)
		}
	case 100:
		protoDollar = protoS[protopt-3 : protopt+1]
//line proto.y:539
		{
			protoVAL.cmpctOpts = &compactOptionsNode{decls: protoDollar[2].opts}
			protoVAL.cmpctOpts.setRange(protoDollar[1].b, protoDollar[3].b)
		}
	case 101:
		protoDollar = protoS[protopt-3 : protopt+1]
//line proto.y:544
		{
			protoVAL.opts = append(protoDollar[1].opts, protoDollar[3].opts...)
		}
	case 103:
		protoDollar = protoS[protopt-3 : protopt+1]
//line proto.y:549
		{
			n := &optionNameNode{parts: protoDollar[1].optNm}
			n.setRange(protoDollar[1].optNm[0], protoDollar[1].optNm[len(protoDollar[1].optNm)-1])
			o := &optionNode{name: n, val: protoDollar[3].v}
			o.setRange(protoDollar[1].optNm[0], protoDollar[3].v)
			protoVAL.opts = []*optionNode{o}
		}
	case 104:
		protoDollar = protoS[protopt-8 : protopt+1]
//line proto.y:557
		{
			checkTag(protolex, protoDollar[5].i.start(), protoDollar[5].i.val)
			if !unicode.IsUpper(rune(protoDollar[3].id.val[0])) {
				lexError(protolex, protoDollar[3].id.start(), fmt.Sprintf("group %s should have a name that starts with a capital letter", protoDollar[3].id.val))
			}
			lbl := fieldLabel{identNode: protoDollar[1].id, required: true}
			protoVAL.grp = &groupNode{groupKeyword: protoDollar[2].id, label: lbl, name: protoDollar[3].id, tag: protoDollar[5].i, decls: protoDollar[7].msgDecls}
			protoVAL.grp.setRange(protoDollar[1].id, protoDollar[8].b)
		}
	case 105:
		protoDollar = protoS[protopt-8 : protopt+1]
//line proto.y:566
		{
			checkTag(protolex, protoDollar[5].i.start(), protoDollar[5].i.val)
			if !unicode.IsUpper(rune(protoDollar[3].id.val[0])) {
				lexError(protolex, protoDollar[3].id.start(), fmt.Sprintf("group %s should have a name that starts with a capital letter", protoDollar[3].id.val))
			}
			lbl := fieldLabel{identNode: protoDollar[1].id}
			protoVAL.grp = &groupNode{groupKeyword: protoDollar[2].id, label: lbl, name: protoDollar[3].id, tag: protoDollar[5].i, decls: protoDollar[7].msgDecls}
			protoVAL.grp.setRange(protoDollar[1].id, protoDollar[8].b)
		}
	case 106:
		protoDollar = protoS[protopt-8 : protopt+1]
//line proto.y:575
		{
			checkTag(protolex, protoDollar[5].i.start(), protoDollar[5].i.val)
			if !unicode.IsUpper(rune(protoDollar[3].id.val[0])) {
				lexError(protolex, protoDollar[3].id.start(), fmt.Sprintf("group %s should have a name that starts with a capital letter", protoDollar[3].id.val))
			}
			lbl := fieldLabel{identNode: protoDollar[1].id, repeated: true}
			protoVAL.grp = &groupNode{groupKeyword: protoDollar[2].id, label: lbl, name: protoDollar[3].id, tag: protoDollar[5].i, decls: protoDollar[7].msgDecls}
			protoVAL.grp.setRange(protoDollar[1].id, protoDollar[8].b)
		}
	case 107:
		protoDollar = protoS[protopt-5 : protopt+1]
//line proto.y:585
		{
			c := 0
			for _, el := range protoDollar[4].ooDecls {
				if el.field != nil {
					c++
				}
			}
			if c == 0 {
				lexError(protolex, protoDollar[1].id.start(), "oneof must contain at least one field")
			}
			protoVAL.oo = &oneOfNode{name: protoDollar[2].id, decls: protoDollar[4].ooDecls}
			protoVAL.oo.setRange(protoDollar[1].id, protoDollar[5].b)
		}
	case 108:
		protoDollar = protoS[protopt-2 : protopt+1]
//line proto.y:599
		{
			protoVAL.ooDecls = append(protoDollar[1].ooDecls, protoDollar[2].ooDecls...)
		}
	case 110:
		protoDollar = protoS[protopt-0 : protopt+1]
//line proto.y:603
		{
			protoVAL.ooDecls = nil
		}
	case 111:
		protoDollar = protoS[protopt-1 : protopt+1]
//line proto.y:607
		{
			protoVAL.ooDecls = []*oneOfElement{{option: protoDollar[1].opts[0]}}
		}
	case 112:
		protoDollar = protoS[protopt-1 : protopt+1]
//line proto.y:610
		{
			protoVAL.ooDecls = []*oneOfElement{{field: protoDollar[1].fld}}
		}
	case 113:
		protoDollar = protoS[protopt-1 : protopt+1]
//line proto.y:613
		{
			protoVAL.ooDecls = []*oneOfElement{{group: protoDollar[1].grp}}
		}
	case 114:
		protoDollar = protoS[protopt-1 : protopt+1]
//line proto.y:616
		{
			protoVAL.ooDecls = []*oneOfElement{{empty: protoDollar[1].b}}
		}
	case 115:
		protoDollar = protoS[protopt-2 : protopt+1]
//line proto.y:619
		{
		}
	case 116:
		protoDollar = protoS[protopt-1 : protopt+1]
//line proto.y:621
		{
		}
	case 117:
		protoDollar = protoS[protopt-5 : protopt+1]
//line proto.y:624
		{
			checkTag(protolex, protoDollar[4].i.start(), protoDollar[4].i.val)
			protoVAL.fld = &fieldNode{fldType: protoDollar[1].cid, name: protoDollar[2].id, tag: protoDollar[4].i}
			protoVAL.fld.setRange(protoDollar[1].cid, protoDollar[5].b)
		}
	case 118:
		protoDollar = protoS[protopt-6 : protopt+1]
//line proto.y:629
		{
			checkTag(protolex, protoDollar[4].i.start(), protoDollar[4].i.val)
			protoVAL.fld = &fieldNode{fldType: protoDollar[1].cid, name: protoDollar[2].id, tag: protoDollar[4].i, options: protoDollar[5].cmpctOpts}
			protoVAL.fld.setRange(protoDollar[1].cid, protoDollar[6].b)
		}
	case 119:
		protoDollar = protoS[protopt-7 : protopt+1]
//line proto.y:635
		{
			checkTag(protolex, protoDollar[4].i.start(), protoDollar[4].i.val)
			if !unicode.IsUpper(rune(protoDollar[2].id.val[0])) {
				lexError(protolex, protoDollar[2].id.start(), fmt.Sprintf("group %s should have a name that starts with a capital letter", protoDollar[2].id.val))
			}
			protoVAL.grp = &groupNode{groupKeyword: protoDollar[1].id, name: protoDollar[2].id, tag: protoDollar[4].i, decls: protoDollar[6].msgDecls}
			protoVAL.grp.setRange(protoDollar[1].id, protoDollar[7].b)
		}
	case 120:
		protoDollar = protoS[protopt-5 : protopt+1]
//line proto.y:644
		{
			checkTag(protolex, protoDollar[4].i.start(), protoDollar[4].i.val)
			protoVAL.mapFld = &mapFieldNode{mapType: protoDollar[1].mapType, name: protoDollar[2].id, tag: protoDollar[4].i}
			protoVAL.mapFld.setRange(protoDollar[1].mapType, protoDollar[5].b)
		}
	case 121:
		protoDollar = protoS[protopt-6 : protopt+1]
//line proto.y:649
		{
			checkTag(protolex, protoDollar[4].i.start(), protoDollar[4].i.val)
			protoVAL.mapFld = &mapFieldNode{mapType: protoDollar[1].mapType, name: protoDollar[2].id, tag: protoDollar[4].i, options: protoDollar[5].cmpctOpts}
			protoVAL.mapFld.setRange(protoDollar[1].mapType, protoDollar[6].b)
		}
	case 122:
		protoDollar = protoS[protopt-6 : protopt+1]
//line proto.y:655
		{
			protoVAL.mapType = &mapTypeNode{mapKeyword: protoDollar[1].id, keyType: protoDollar[3].id, valueType: protoDollar[5].cid}
			protoVAL.mapType.setRange(protoDollar[1].id, protoDollar[6].b)
		}
	case 135:
		protoDollar = protoS[protopt-3 : protopt+1]
//line proto.y:673
		{
			protoVAL.ext = &extensionRangeNode{ranges: protoDollar[2].rngs}
			protoVAL.ext.setRange(protoDollar[1].id, protoDollar[3].b)
		}
	case 136:
		protoDollar = protoS[protopt-4 : protopt+1]
//line proto.y:677
		{
			protoVAL.ext = &extensionRangeNode{ranges: protoDollar[2].rngs, options: protoDollar[3].cmpctOpts}
			protoVAL.ext.setRange(protoDollar[1].id, protoDollar[4].b)
		}
	case 137:
		protoDollar = protoS[protopt-3 : protopt+1]
//line proto.y:682
		{
			protoVAL.rngs = append(protoDollar[1].rngs, protoDollar[3].rngs...)
		}
	case 139:
		protoDollar = protoS[protopt-1 : protopt+1]
//line proto.y:687
		{
			if protoDollar[1].i.val > internal.MaxTag {
				lexError(protolex, protoDollar[1].i.start(), fmt.Sprintf("range includes out-of-range tag: %d (should be between 0 and %d)", protoDollar[1].i.val, internal.MaxTag))
			}
			r := &rangeNode{stNode: protoDollar[1].i, enNode: protoDollar[1].i, st: int32(protoDollar[1].i.val), en: int32(protoDollar[1].i.val)}
			r.setRange(protoDollar[1].i, protoDollar[1].i)
			protoVAL.rngs = []*rangeNode{r}
		}
	case 140:
		protoDollar = protoS[protopt-3 : protopt+1]
//line proto.y:695
		{
			if protoDollar[1].i.val > internal.MaxTag {
				lexError(protolex, protoDollar[1].i.start(), fmt.Sprintf("range start is out-of-range tag: %d (should be between 0 and %d)", protoDollar[1].i.val, internal.MaxTag))
			}
			if protoDollar[3].i.val > internal.MaxTag {
				lexError(protolex, protoDollar[3].i.start(), fmt.Sprintf("range end is out-of-range tag: %d (should be between 0 and %d)", protoDollar[3].i.val, internal.MaxTag))
			}
			if protoDollar[1].i.val > protoDollar[3].i.val {
				lexError(protolex, protoDollar[1].i.start(), fmt.Sprintf("range, %d to %d, is invalid: start must be <= end", protoDollar[1].i.val, protoDollar[3].i.val))
			}
			r := &rangeNode{stNode: protoDollar[1].i, enNode: protoDollar[3].i, st: int32(protoDollar[1].i.val), en: int32(protoDollar[3].i.val)}
			r.setRange(protoDollar[1].i, protoDollar[3].i)
			protoVAL.rngs = []*rangeNode{r}
		}
	case 141:
		protoDollar = protoS[protopt-3 : protopt+1]
//line proto.y:709
		{
			if protoDollar[1].i.val > internal.MaxTag {
				lexError(protolex, protoDollar[1].i.start(), fmt.Sprintf("range start is out-of-range tag: %d (should be between 0 and %d)", protoDollar[1].i.val, internal.MaxTag))
			}
			r := &rangeNode{stNode: protoDollar[1].i, enNode: protoDollar[3].id, st: int32(protoDollar[1].i.val), en: internal.MaxTag}
			r.setRange(protoDollar[1].i, protoDollar[3].id)
			protoVAL.rngs = []*rangeNode{r}
		}
	case 142:
		protoDollar = protoS[protopt-3 : protopt+1]
//line proto.y:718
		{
			protoVAL.rngs = append(protoDollar[1].rngs, protoDollar[3].rngs...)
		}
	case 144:
		protoDollar = protoS[protopt-1 : protopt+1]
//line proto.y:723
		{
			checkInt64InInt32Range(protolex, protoDollar[1].il.start(), protoDollar[1].il.val)
			r := &rangeNode{stNode: protoDollar[1].il, enNode: protoDollar[1].il, st: int32(protoDollar[1].il.val), en: int32(protoDollar[1].il.val)}
			r.setRange(protoDollar[1].il, protoDollar[1].il)
			protoVAL.rngs = []*rangeNode{r}
		}
	case 145:
		protoDollar = protoS[protopt-3 : protopt+1]
//line proto.y:729
		{
			checkInt64InInt32Range(protolex, protoDollar[1].il.start(), protoDollar[1].il.val)
			checkInt64InInt32Range(protolex, protoDollar[3].il.start(), protoDollar[3].il.val)
			if protoDollar[1].il.val > protoDollar[3].il.val {
				lexError(protolex, protoDollar[1].il.start(), fmt.Sprintf("range, %d to %d, is invalid: start must be <= end", protoDollar[1].il.val, protoDollar[3].il.val))
			}
			r := &rangeNode{stNode: protoDollar[1].il, enNode: protoDollar[3].il, st: int32(protoDollar[1].il.val), en: int32(protoDollar[3].il.val)}
			r.setRange(protoDollar[1].il, protoDollar[3].il)
			protoVAL.rngs = []*rangeNode{r}
		}
	case 146:
		protoDollar = protoS[protopt-3 : protopt+1]
//line proto.y:739
		{
			checkInt64InInt32Range(protolex, protoDollar[1].il.start(), protoDollar[1].il.val)
			r := &rangeNode{stNode: protoDollar[1].il, enNode: protoDollar[3].id, st: int32(protoDollar[1].il.val), en: math.MaxInt32}
			r.setRange(protoDollar[1].il, protoDollar[3].id)
			protoVAL.rngs = []*rangeNode{r}
		}
	case 147:
		protoDollar = protoS[protopt-3 : protopt+1]
//line proto.y:746
		{
			protoVAL.resvd = &reservedNode{ranges: protoDollar[2].rngs}
			protoVAL.resvd.setRange(protoDollar[1].id, protoDollar[3].b)
		}
	case 149:
		protoDollar = protoS[protopt-3 : protopt+1]
//line proto.y:752
		{
			protoVAL.resvd = &reservedNode{ranges: protoDollar[2].rngs}
			protoVAL.resvd.setRange(protoDollar[1].id, protoDollar[3].b)
		}
	case 151:
		protoDollar = protoS[protopt-3 : protopt+1]
//line proto.y:758
		{
			rsvd := map[string]struct{}{}
			for _, n := range protoDollar[2].names {
				if _, ok := rsvd[n.val]; ok {
					lexError(protolex, n.start(), fmt.Sprintf("name %q is reserved multiple times", n.val))
					break
				}
				rsvd[n.val] = struct{}{}
			}
			protoVAL.resvd = &reservedNode{names: protoDollar[2].names}
			protoVAL.resvd.setRange(protoDollar[1].id, protoDollar[3].b)
		}
	case 152:
		protoDollar = protoS[protopt-3 : protopt+1]
//line proto.y:771
		{
			protoVAL.names = append(protoDollar[1].names, protoDollar[3].str)
		}
	case 153:
		protoDollar = protoS[protopt-1 : protopt+1]
//line proto.y:774
		{
			protoVAL.names = []*compoundStringNode{protoDollar[1].str}
		}
	case 154:
		protoDollar = protoS[protopt-5 : protopt+1]
//line proto.y:778
		{
			c := 0
			for _, el := range protoDollar[4].enDecls {
				if el.value != nil {
					c++
				}
			}
			if c == 0 {
				lexError(protolex, protoDollar[1].id.start(), "enums must define at least one value")
			}
			protoVAL.en = &enumNode{name: protoDollar[2].id, decls: protoDollar[4].enDecls}
			protoVAL.en.setRange(protoDollar[1].id, protoDollar[5].b)
		}
	case 155:
		protoDollar = protoS[protopt-2 : protopt+1]
//line proto.y:792
		{
			protoVAL.enDecls = append(protoDollar[1].enDecls, protoDollar[2].enDecls...)
		}
	case 157:
		protoDollar = protoS[protopt-0 : protopt+1]
//line proto.y:796
		{
			protoVAL.enDecls = nil
		}
	case 158:
		protoDollar = protoS[protopt-1 : protopt+1]
//line proto.y:800
		{
			protoVAL.enDecls = []*enumElement{{option: protoDollar[1].opts[0]}}
		}
	case 159:
		protoDollar = protoS[protopt-1 : protopt+1]
//line proto.y:803
		{
			protoVAL.enDecls = []*enumElement{{value: protoDollar[1].env}}
		}
	case 160:
		protoDollar = protoS[protopt-1 : protopt+1]
//line proto.y:806
		{
			protoVAL.enDecls = []*enumElement{{reserved: protoDollar[1].resvd}}
		}
	case 161:
		protoDollar = protoS[protopt-1 : protopt+1]
//line proto.y:809
		{
			protoVAL.enDecls = []*enumElement{{empty: protoDollar[1].b}}
		}
	case 162:
		protoDollar = protoS[protopt-2 : protopt+1]
//line proto.y:812
		{
		}
	case 163:
		protoDollar = protoS[protopt-1 : protopt+1]
//line proto.y:814
		{
		}
	case 164:
		protoDollar = protoS[protopt-4 : protopt+1]
//line proto.y:817
		{
			checkInt64InInt32Range(protolex, protoDollar[3].il.start(), protoDollar[3].il.val)
			protoVAL.env = &enumValueNode{name: protoDollar[1].id, numberN: protoDollar[3].il}
			protoVAL.env.setRange(protoDollar[1].id, protoDollar[4].b)
		}
	case 165:
		protoDollar = protoS[protopt-5 : protopt+1]
//line proto.y:822
		{
			checkInt64InInt32Range(protolex, protoDollar[3].il.start(), protoDollar[3].il.val)
			protoVAL.env = &enumValueNode{name: protoDollar[1].id, numberN: protoDollar[3].il, options: protoDollar[4].cmpctOpts}
			protoVAL.env.setRange(protoDollar[1].id, protoDollar[5].b)
		}
	case 166:
		protoDollar = protoS[protopt-5 : protopt+1]
//line proto.y:828
		{
			protoVAL.msg = &messageNode{name: protoDollar[2].id, decls: protoDollar[4].msgDecls}
			protoVAL.msg.setRange(protoDollar[1].id, protoDollar[5].b)
		}
	case 167:
		protoDollar = protoS[protopt-2 : protopt+1]
//line proto.y:833
		{
			protoVAL.msgDecls = append(protoDollar[1].msgDecls, protoDollar[2].msgDecls...)
		}
	case 169:
		protoDollar = protoS[protopt-0 : protopt+1]
//line proto.y:837
		{
			protoVAL.msgDecls = nil
		}
	case 170:
		protoDollar = protoS[protopt-1 : protopt+1]
//line proto.y:841
		{
			protoVAL.msgDecls = []*messageElement{{field: protoDollar[1].fld}}
		}
	case 171:
		protoDollar = protoS[protopt-1 : protopt+1]
//line proto.y:844
		{
			protoVAL.msgDecls = []*messageElement{{enum: protoDollar[1].en}}
		}
	case 172:
		protoDollar = protoS[protopt-1 : protopt+1]
//line proto.y:847
		{
			protoVAL.msgDecls = []*messageElement{{nested: protoDollar[1].msg}}
		}
	case 173:
		protoDollar = protoS[protopt-1 : protopt+1]
//line proto.y:850
		{
			protoVAL.msgDecls = []*messageElement{{extend: protoDollar[1].extend}}
		}
	case 174:
		protoDollar = protoS[protopt-1 : protopt+1]
//line proto.y:853
		{
			protoVAL.msgDecls = []*messageElement{{extensionRange: protoDollar[1].ext}}
		}
	case 175:
		protoDollar = protoS[protopt-1 : protopt+1]
//line proto.y:856
		{
			protoVAL.msgDecls = []*messageElement{{group: protoDollar[1].grp}}
		}
	case 176:
		protoDollar = protoS[protopt-1 : protopt+1]
//line proto.y:859
		{
			protoVAL.msgDecls = []*messageElement{{option: protoDollar[1].opts[0]}}
		}
	case 177:
		protoDollar = protoS[protopt-1 : protopt+1]
//line proto.y:862
		{
			protoVAL.msgDecls = []*messageElement{{oneOf: protoDollar[1].oo}}
		}
	case 178:
		protoDollar = protoS[protopt-1 : protopt+1]
//line proto.y:865
		{
			protoVAL.msgDecls = []*messageElement{{mapField: protoDollar[1].mapFld}}
		}
	case 179:
		protoDollar = protoS[protopt-1 : protopt+1]
//line proto.y:868
		{
			protoVAL.msgDecls = []*messageElement{{reserved: protoDollar[1].resvd}}
		}
	case 180:
		protoDollar = protoS[protopt-1 : protopt+1]
//line proto.y:871
		{
			protoVAL.msgDecls = []*messageElement{{empty: protoDollar[1].b}}
		}
	case 181:
		protoDollar = protoS[protopt-2 : protopt+1]
//line proto.y:874
		{
		}
	case 182:
		protoDollar = protoS[protopt-1 : protopt+1]
//line proto.y:876
		{
		}
	case 183:
		protoDollar = protoS[protopt-5 : protopt+1]
//line proto.y:879
		{
			c := 0
			for _, el := range protoDollar[4].extDecls {
				if el.field != nil || el.group != nil {
					c++
				}
			}
			if c == 0 {
				lexError(protolex, protoDollar[1].id.start(), "extend sections must define at least one extension")
			}
			protoVAL.extend = &extendNode{extendee: protoDollar[2].cid, decls: protoDollar[4].extDecls}
			protoVAL.extend.setRange(protoDollar[1].id, protoDollar[5].b)
		}
	case 184:
		protoDollar = protoS[protopt-2 : protopt+1]
//line proto.y:893
		{
			protoVAL.extDecls = append(protoDollar[1].extDecls, protoDollar[2].extDecls...)
		}
	case 186:
		protoDollar = protoS[protopt-0 : protopt+1]
//line proto.y:897
		{
			protoVAL.extDecls = nil
		}
	case 187:
		protoDollar = protoS[protopt-1 : protopt+1]
//line proto.y:901
		{
			protoVAL.extDecls = []*extendElement{{field: protoDollar[1].fld}}
		}
	case 188:
		protoDollar = protoS[protopt-1 : protopt+1]
//line proto.y:904
		{
			protoVAL.extDecls = []*extendElement{{group: protoDollar[1].grp}}
		}
	case 189:
		protoDollar = protoS[protopt-1 : protopt+1]
//line proto.y:907
		{
			protoVAL.extDecls = []*extendElement{{empty: protoDollar[1].b}}
		}
	case 190:
		protoDollar = protoS[protopt-2 : protopt+1]
//line proto.y:910
		{
		}
	case 191:
		protoDollar = protoS[protopt-1 : protopt+1]
//line proto.y:912
		{
		}
	case 192:
		protoDollar = protoS[protopt-5 : protopt+1]
//line proto.y:915
		{
			protoVAL.svc = &serviceNode{name: protoDollar[2].id, decls: protoDollar[4].svcDecls}
			protoVAL.svc.setRange(protoDollar[1].id, protoDollar[5].b)
		}
	case 193:
		protoDollar = protoS[protopt-2 : protopt+1]
//line proto.y:920
		{
			protoVAL.svcDecls = append(protoDollar[1].svcDecls, protoDollar[2].svcDecls...)
		}
	case 195:
		protoDollar = protoS[protopt-0 : protopt+1]
//line proto.y:924
		{
			protoVAL.svcDecls = nil
		}
	case 196:
		protoDollar = protoS[protopt-1 : protopt+1]
//line proto.y:931
		{
			protoVAL.svcDecls = []*serviceElement{{option: protoDollar[1].opts[0]}}
		}
	case 197:
		protoDollar = protoS[protopt-1 : protopt+1]
//line proto.y:934
		{
			protoVAL.svcDecls = []*serviceElement{{rpc: protoDollar[1].mtd}}
		}
	case 198:
		protoDollar = protoS[protopt-1 : protopt+1]
//line proto.y:937
		{
			protoVAL.svcDecls = []*serviceElement{{empty: protoDollar[1].b}}
		}
	case 199:
		protoDollar = protoS[protopt-2 : protopt+1]
//line proto.y:940
		{
		}
	case 200:
		protoDollar = protoS[protopt-1 : protopt+1]
//line proto.y:942
		{
		}
	case 201:
		protoDollar = protoS[protopt-10 : protopt+1]
//line proto.y:945
		{
			protoVAL.mtd = &methodNode{name: protoDollar[2].id, input: protoDollar[4].rpcType, output: protoDollar[8].rpcType}
			protoVAL.mtd.setRange(protoDollar[1].id, protoDollar[10].b)
		}
	case 202:
		protoDollar = protoS[protopt-12 : protopt+1]
//line proto.y:949
		{
			protoVAL.mtd = &methodNode{name: protoDollar[2].id, input: protoDollar[4].rpcType, output: protoDollar[8].rpcType, options: protoDollar[11].opts}
			protoVAL.mtd.setRange(protoDollar[1].id, protoDollar[12].b)
		}
	case 203:
		protoDollar = protoS[protopt-2 : protopt+1]
//line proto.y:954
		{
			protoVAL.rpcType = &rpcTypeNode{msgType: protoDollar[2].cid, streamKeyword: protoDollar[1].id}
			protoVAL.rpcType.setRange(protoDollar[1].id, protoDollar[2].cid)
		}
	case 204:
		protoDollar = protoS[protopt-1 : protopt+1]
//line proto.y:958
		{
			protoVAL.rpcType = &rpcTypeNode{msgType: protoDollar[1].cid}
			protoVAL.rpcType.setRange(protoDollar[1].cid, protoDollar[1].cid)
		}
	case 205:
		protoDollar = protoS[protopt-2 : protopt+1]
//line proto.y:963
		{
			protoVAL.opts = append(protoDollar[1].opts, protoDollar[2].opts...)
		}
	case 207:
		protoDollar = protoS[protopt-0 : protopt+1]
//line proto.y:967
		{
			protoVAL.opts = []*optionNode{}
		}
	case 208:
		protoDollar = protoS[protopt-1 : protopt+1]
//line proto.y:971
		{
			protoVAL.opts = protoDollar[1].opts
		}
	case 209:
		protoDollar = protoS[protopt-1 : protopt+1]
//line proto.y:974
		{
			protoVAL.opts = []*optionNode{}
		}
	case 210:
		protoDollar = protoS[protopt-2 : protopt+1]
//line proto.y:977
		{
		}
	case 211:
		protoDollar = protoS[protopt-1 : protopt+1]
//line proto.y:979
		{
		}
	}
	goto protostack /* stack new state and value */
}
